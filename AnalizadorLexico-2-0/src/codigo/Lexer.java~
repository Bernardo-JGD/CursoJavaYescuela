/* The following code was generated by JFlex 1.4.3 on 12/07/21 07:18 PM */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/07/21 07:18 PM from the specification file
 * <tt>C:/Users/TOSHIBA/Documents/NetBeansProjects/AnalizadorLexico-2-0/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\42\2\0\1\3\22\0\1\3\1\52\1\65\2\0"+
    "\1\47\1\54\1\66\1\55\1\56\1\46\1\44\1\70\1\45\1\67"+
    "\1\41\12\2\1\64\1\63\1\50\1\43\1\51\2\0\1\1\1\37"+
    "\1\1\1\35\1\1\1\36\2\1\1\34\2\1\1\40\6\1\1\26"+
    "\7\1\1\61\1\0\1\62\1\0\1\1\1\0\1\17\1\27\1\16"+
    "\1\25\1\10\1\7\1\23\1\22\1\4\1\1\1\32\1\11\1\20"+
    "\1\5\1\13\1\30\1\1\1\14\1\12\1\6\1\15\1\31\1\21"+
    "\1\33\1\24\1\1\1\57\1\53\1\60\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\22\2\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\1\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\34\2"+
    "\1\35\12\2\1\4\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\0\1\53\2\2\1\54\3\2\1\55\3\2\1\56"+
    "\5\2\1\57\3\2\1\60\10\2\1\61\17\2\1\0"+
    "\2\2\1\62\1\63\1\64\1\65\4\2\1\66\1\67"+
    "\10\2\1\70\1\71\1\72\1\73\12\2\1\74\5\2"+
    "\1\75\1\3\7\2\1\76\1\77\1\2\1\100\1\2"+
    "\1\101\1\2\1\102\1\2\1\103\1\2\1\104\1\2"+
    "\1\105\10\2\1\106\1\107\5\2\1\110\6\2\1\111"+
    "\1\112\1\113\3\2\1\114\1\115\1\2\1\116\1\2"+
    "\1\117\4\2\1\120\2\2\1\121\6\2\1\122\1\123"+
    "\1\2\1\124\1\125\1\126\1\127\1\2\1\130\3\2"+
    "\1\131\1\132\1\133\1\134\1\135\3\2\1\136\1\137"+
    "\1\140\1\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7"+
    "\0\u0720\0\u0759\0\u0792\0\71\0\71\0\71\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\u07cb\0\162"+
    "\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993"+
    "\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b"+
    "\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23"+
    "\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb"+
    "\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\u10ec\0\162\0\u1125"+
    "\0\u115e\0\162\0\u1197\0\u11d0\0\u1209\0\162\0\u1242\0\u127b"+
    "\0\u12b4\0\162\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1\0\162"+
    "\0\u140a\0\u1443\0\u147c\0\162\0\u14b5\0\u14ee\0\u1527\0\u1560"+
    "\0\u1599\0\u15d2\0\u160b\0\u1644\0\162\0\u167d\0\u16b6\0\u16ef"+
    "\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7"+
    "\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f"+
    "\0\162\0\162\0\162\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\162"+
    "\0\162\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2"+
    "\0\u1d2b\0\162\0\162\0\162\0\162\0\u1d64\0\u1d9d\0\u1dd6"+
    "\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\162"+
    "\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\162\0\71\0\u20bb"+
    "\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211\0\162\0\162"+
    "\0\u224a\0\162\0\u2283\0\162\0\u22bc\0\162\0\u22f5\0\162"+
    "\0\u232e\0\162\0\u2367\0\162\0\u23a0\0\u23d9\0\u2412\0\u244b"+
    "\0\u2484\0\u24bd\0\u24f6\0\u252f\0\162\0\u2568\0\u25a1\0\u25da"+
    "\0\u2613\0\u264c\0\u2685\0\162\0\u26be\0\u26f7\0\u2730\0\u2769"+
    "\0\u27a2\0\u27db\0\162\0\162\0\162\0\u2814\0\u284d\0\u2886"+
    "\0\162\0\162\0\u28bf\0\162\0\u28f8\0\162\0\u2931\0\u296a"+
    "\0\u29a3\0\u29dc\0\162\0\u2a15\0\u2a4e\0\162\0\u2a87\0\u2ac0"+
    "\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\162\0\162\0\u2bdd\0\162"+
    "\0\162\0\162\0\162\0\u2c16\0\162\0\u2c4f\0\u2c88\0\u2cc1"+
    "\0\162\0\162\0\162\0\162\0\162\0\u2cfa\0\u2d33\0\u2d6c"+
    "\0\162\0\162\0\162\0\162";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\3\1\17\1\3"+
    "\1\20\1\21\1\3\1\22\1\3\1\23\1\24\1\25"+
    "\1\26\1\27\7\3\1\30\1\5\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\72\0\2\3\1\0\35\3\32\0"+
    "\1\4\71\0\1\5\36\0\1\5\27\0\2\3\1\0"+
    "\1\3\1\57\1\3\1\60\10\3\1\61\20\3\31\0"+
    "\2\3\1\0\4\3\1\62\4\3\1\63\23\3\31\0"+
    "\2\3\1\0\10\3\1\64\5\3\1\65\16\3\31\0"+
    "\2\3\1\0\1\66\4\3\1\67\1\3\1\70\1\3"+
    "\1\71\1\3\1\72\21\3\31\0\2\3\1\0\5\3"+
    "\1\73\27\3\31\0\2\3\1\0\7\3\1\74\25\3"+
    "\31\0\2\3\1\0\2\3\1\75\1\3\1\76\4\3"+
    "\1\77\3\3\1\100\1\101\16\3\31\0\2\3\1\0"+
    "\11\3\1\102\23\3\31\0\2\3\1\0\4\3\1\103"+
    "\30\3\31\0\2\3\1\0\5\3\1\104\1\3\1\105"+
    "\3\3\1\106\2\3\1\107\16\3\31\0\2\3\1\0"+
    "\13\3\1\110\21\3\31\0\2\3\1\0\1\111\15\3"+
    "\1\112\16\3\31\0\2\3\1\0\4\3\1\113\30\3"+
    "\31\0\2\3\1\0\4\3\1\114\2\3\1\115\25\3"+
    "\31\0\2\3\1\0\2\3\1\116\7\3\1\117\5\3"+
    "\1\120\14\3\31\0\2\3\1\0\7\3\1\121\1\122"+
    "\7\3\1\123\14\3\31\0\2\3\1\0\10\3\1\124"+
    "\1\125\1\3\1\126\21\3\31\0\2\3\1\0\7\3"+
    "\1\127\25\3\71\0\1\130\1\0\1\131\70\0\1\132"+
    "\70\0\1\133\1\134\67\0\1\135\1\0\1\136\66\0"+
    "\1\137\70\0\1\140\70\0\1\141\70\0\1\142\70\0"+
    "\1\143\100\0\1\144\71\0\1\145\61\0\1\146\24\0"+
    "\2\3\1\0\2\3\1\147\3\3\1\150\26\3\31\0"+
    "\2\3\1\0\24\3\1\151\10\3\31\0\2\3\1\0"+
    "\15\3\1\152\11\3\1\153\5\3\31\0\2\3\1\0"+
    "\5\3\1\154\27\3\31\0\2\3\1\0\11\3\1\155"+
    "\6\3\1\156\14\3\31\0\2\3\1\0\1\157\34\3"+
    "\31\0\2\3\1\0\1\3\1\160\33\3\31\0\2\3"+
    "\1\0\7\3\1\161\25\3\31\0\2\3\1\0\10\3"+
    "\1\162\24\3\31\0\2\3\1\0\1\3\1\163\33\3"+
    "\31\0\2\3\1\0\5\3\1\164\27\3\31\0\2\3"+
    "\1\0\6\3\1\165\26\3\31\0\2\3\1\0\1\3"+
    "\1\166\33\3\31\0\2\3\1\0\13\3\1\167\21\3"+
    "\31\0\2\3\1\0\2\3\1\170\32\3\31\0\2\3"+
    "\1\0\24\3\1\171\10\3\31\0\2\3\1\0\1\172"+
    "\34\3\31\0\2\3\1\0\7\3\1\173\25\3\31\0"+
    "\2\3\1\0\2\3\1\174\32\3\31\0\2\3\1\0"+
    "\2\3\1\175\32\3\31\0\2\3\1\0\13\3\1\176"+
    "\21\3\31\0\2\3\1\0\1\3\1\177\33\3\31\0"+
    "\2\3\1\0\6\3\1\200\26\3\31\0\2\3\1\0"+
    "\13\3\1\201\21\3\31\0\2\3\1\0\1\202\34\3"+
    "\31\0\2\3\1\0\2\3\1\203\32\3\31\0\2\3"+
    "\1\0\1\204\34\3\31\0\2\3\1\0\2\3\1\205"+
    "\32\3\31\0\2\3\1\0\3\3\1\206\1\3\1\207"+
    "\27\3\31\0\2\3\1\0\11\3\1\210\1\211\22\3"+
    "\31\0\2\3\1\0\10\3\1\212\24\3\31\0\2\3"+
    "\1\0\13\3\1\213\21\3\31\0\2\3\1\0\6\3"+
    "\1\214\26\3\31\0\2\3\1\0\7\3\1\215\25\3"+
    "\31\0\2\3\1\0\4\3\1\216\30\3\31\0\2\3"+
    "\1\0\2\3\1\217\32\3\31\0\2\3\1\0\1\220"+
    "\6\3\1\221\25\3\31\0\2\3\1\0\23\3\1\222"+
    "\11\3\31\0\2\3\1\0\12\3\1\223\22\3\31\0"+
    "\2\3\1\0\1\224\34\3\30\0\42\130\1\0\26\130"+
    "\2\0\1\225\67\0\2\3\1\0\2\3\1\226\32\3"+
    "\31\0\2\3\1\0\7\3\1\227\25\3\31\0\2\3"+
    "\1\0\2\3\1\230\32\3\31\0\2\3\1\0\5\3"+
    "\1\231\27\3\31\0\2\3\1\0\4\3\1\232\30\3"+
    "\31\0\2\3\1\0\6\3\1\233\26\3\31\0\2\3"+
    "\1\0\13\3\1\234\21\3\31\0\2\3\1\0\13\3"+
    "\1\235\21\3\31\0\2\3\1\0\12\3\1\236\22\3"+
    "\31\0\2\3\1\0\6\3\1\237\26\3\31\0\2\3"+
    "\1\0\4\3\1\240\30\3\31\0\2\3\1\0\17\3"+
    "\1\241\15\3\31\0\2\3\1\0\2\3\1\242\32\3"+
    "\31\0\2\3\1\0\4\3\1\243\30\3\31\0\2\3"+
    "\1\0\2\3\1\244\32\3\31\0\2\3\1\0\10\3"+
    "\1\245\24\3\31\0\2\3\1\0\11\3\1\246\23\3"+
    "\31\0\2\3\1\0\6\3\1\247\26\3\31\0\2\3"+
    "\1\0\2\3\1\250\3\3\1\251\26\3\31\0\2\3"+
    "\1\0\4\3\1\252\30\3\31\0\2\3\1\0\10\3"+
    "\1\253\24\3\31\0\2\3\1\0\1\3\1\254\33\3"+
    "\31\0\2\3\1\0\16\3\1\255\16\3\31\0\2\3"+
    "\1\0\5\3\1\256\27\3\31\0\2\3\1\0\13\3"+
    "\1\257\21\3\31\0\2\3\1\0\4\3\1\260\30\3"+
    "\31\0\2\3\1\0\23\3\1\261\11\3\31\0\2\3"+
    "\1\0\11\3\1\262\23\3\31\0\2\3\1\0\1\263"+
    "\34\3\31\0\2\3\1\0\1\3\1\264\33\3\31\0"+
    "\2\3\1\0\2\3\1\265\32\3\31\0\2\3\1\0"+
    "\5\3\1\266\27\3\31\0\2\3\1\0\13\3\1\267"+
    "\21\3\31\0\2\3\1\0\4\3\1\270\30\3\31\0"+
    "\2\3\1\0\1\3\1\271\23\3\1\272\7\3\31\0"+
    "\2\3\1\0\2\3\1\273\32\3\31\0\2\3\1\0"+
    "\5\3\1\274\27\3\31\0\2\3\1\0\26\3\1\275"+
    "\6\3\31\0\2\3\1\0\21\3\1\276\13\3\32\0"+
    "\1\225\53\0\1\277\13\0\2\3\1\0\13\3\1\300"+
    "\21\3\31\0\2\3\1\0\10\3\1\301\24\3\31\0"+
    "\2\3\1\0\30\3\1\302\1\303\1\304\1\305\1\306"+
    "\31\0\2\3\1\0\5\3\1\307\27\3\31\0\2\3"+
    "\1\0\2\3\1\310\32\3\31\0\2\3\1\0\2\3"+
    "\1\311\32\3\31\0\2\3\1\0\4\3\1\312\30\3"+
    "\31\0\2\3\1\0\1\313\34\3\31\0\2\3\1\0"+
    "\10\3\1\314\24\3\31\0\2\3\1\0\12\3\1\315"+
    "\22\3\31\0\2\3\1\0\2\3\1\316\32\3\31\0"+
    "\2\3\1\0\10\3\1\317\24\3\31\0\2\3\1\0"+
    "\6\3\1\320\26\3\31\0\2\3\1\0\1\321\34\3"+
    "\31\0\2\3\1\0\2\3\1\322\4\3\1\323\25\3"+
    "\31\0\2\3\1\0\4\3\1\324\30\3\31\0\2\3"+
    "\1\0\11\3\1\325\23\3\31\0\2\3\1\0\2\3"+
    "\1\326\32\3\31\0\2\3\1\0\5\3\1\327\27\3"+
    "\31\0\2\3\1\0\14\3\1\330\20\3\31\0\2\3"+
    "\1\0\1\3\1\331\33\3\31\0\2\3\1\0\1\3"+
    "\1\332\33\3\31\0\2\3\1\0\4\3\1\333\30\3"+
    "\31\0\2\3\1\0\4\3\1\334\30\3\31\0\2\3"+
    "\1\0\26\3\1\335\6\3\31\0\2\3\1\0\2\3"+
    "\1\336\32\3\31\0\2\3\1\0\13\3\1\337\21\3"+
    "\31\0\2\3\1\0\4\3\1\340\30\3\31\0\2\3"+
    "\1\0\1\341\34\3\31\0\2\3\1\0\13\3\1\342"+
    "\21\3\31\0\2\3\1\0\1\3\1\343\33\3\31\0"+
    "\2\3\1\0\2\3\1\344\32\3\31\0\2\3\1\0"+
    "\1\3\1\345\33\3\31\0\2\3\1\0\7\3\1\346"+
    "\25\3\31\0\2\3\1\0\5\3\1\347\27\3\31\0"+
    "\2\3\1\0\20\3\1\350\14\3\31\0\2\3\1\0"+
    "\7\3\1\351\25\3\31\0\2\3\1\0\1\352\34\3"+
    "\31\0\2\3\1\0\12\3\1\353\22\3\31\0\2\3"+
    "\1\0\16\3\1\354\16\3\31\0\2\3\1\0\1\3"+
    "\1\355\33\3\31\0\2\3\1\0\1\3\1\356\33\3"+
    "\31\0\2\3\1\0\5\3\1\357\27\3\31\0\2\3"+
    "\1\0\5\3\1\360\27\3\31\0\2\3\1\0\4\3"+
    "\1\361\30\3\31\0\2\3\1\0\4\3\1\362\30\3"+
    "\31\0\2\3\1\0\4\3\1\363\30\3\31\0\2\3"+
    "\1\0\17\3\1\364\15\3\31\0\2\3\1\0\4\3"+
    "\1\365\30\3\31\0\2\3\1\0\14\3\1\366\20\3"+
    "\31\0\2\3\1\0\13\3\1\367\21\3\31\0\2\3"+
    "\1\0\5\3\1\370\27\3\31\0\2\3\1\0\2\3"+
    "\1\371\32\3\31\0\2\3\1\0\12\3\1\372\22\3"+
    "\31\0\2\3\1\0\12\3\1\373\22\3\31\0\2\3"+
    "\1\0\17\3\1\374\15\3\31\0\2\3\1\0\12\3"+
    "\1\375\22\3\31\0\2\3\1\0\2\3\1\376\32\3"+
    "\31\0\2\3\1\0\11\3\1\377\23\3\31\0\2\3"+
    "\1\0\7\3\1\u0100\25\3\31\0\2\3\1\0\2\3"+
    "\1\u0101\32\3\31\0\2\3\1\0\1\3\1\u0102\33\3"+
    "\31\0\2\3\1\0\7\3\1\u0103\25\3\31\0\2\3"+
    "\1\0\11\3\1\u0104\23\3\31\0\2\3\1\0\4\3"+
    "\1\u0105\30\3\31\0\2\3\1\0\2\3\1\u0106\32\3"+
    "\31\0\2\3\1\0\1\3\1\u0107\33\3\31\0\2\3"+
    "\1\0\10\3\1\u0108\24\3\31\0\2\3\1\0\1\3"+
    "\1\u0109\33\3\31\0\2\3\1\0\1\3\1\u010a\33\3"+
    "\31\0\2\3\1\0\4\3\1\u010b\30\3\31\0\2\3"+
    "\1\0\2\3\1\u010c\32\3\31\0\2\3\1\0\4\3"+
    "\1\u010d\30\3\31\0\2\3\1\0\4\3\1\u010e\30\3"+
    "\31\0\2\3\1\0\23\3\1\u010f\11\3\31\0\2\3"+
    "\1\0\13\3\1\u0110\21\3\31\0\2\3\1\0\4\3"+
    "\1\u0111\30\3\31\0\2\3\1\0\17\3\1\u0112\15\3"+
    "\31\0\2\3\1\0\1\3\1\u0113\33\3\31\0\2\3"+
    "\1\0\4\3\1\u0114\30\3\31\0\2\3\1\0\2\3"+
    "\1\u0115\32\3\31\0\2\3\1\0\4\3\1\u0116\30\3"+
    "\31\0\2\3\1\0\7\3\1\u0117\25\3\31\0\2\3"+
    "\1\0\5\3\1\u0118\27\3\31\0\2\3\1\0\2\3"+
    "\1\u0119\32\3\31\0\2\3\1\0\21\3\1\u011a\13\3"+
    "\31\0\2\3\1\0\3\3\1\u011b\31\3\31\0\2\3"+
    "\1\0\4\3\1\u011c\30\3\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11685];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\41\1\13\11\52\1\15\11\1\0\56\1"+
    "\1\0\51\1\1\11\135\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 84: 
          { lexeme=yytext(); return SCanner;
          }
        case 98: break;
        case 69: 
          { lexeme=yytext(); return While;
          }
        case 99: break;
        case 24: 
          { lexeme=yytext(); return Comilla;
          }
        case 100: break;
        case 47: 
          { lexeme=yytext(); return Set;
          }
        case 101: break;
        case 32: 
          { lexeme=yytext(); return Suma_combinada;
          }
        case 102: break;
        case 68: 
          { lexeme=yytext(); return Const;
          }
        case 103: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 104: break;
        case 86: 
          { lexeme=yytext(); return Println;
          }
        case 105: break;
        case 42: 
          { lexeme=yytext(); return AND;
          }
        case 106: break;
        case 93: 
          { lexeme=yytext(); return Document;
          }
        case 107: break;
        case 89: 
          { lexeme=yytext(); return NextByte;
          }
        case 108: break;
        case 70: 
          { lexeme=yytext(); return Break;
          }
        case 109: break;
        case 15: 
          { lexeme=yytext(); return Parentesis_a;
          }
        case 110: break;
        case 54: 
          { lexeme=yytext(); return Else;
          }
        case 111: break;
        case 59: 
          { lexeme=yytext(); return With;
          }
        case 112: break;
        case 58: 
          { lexeme=yytext(); return Main;
          }
        case 113: break;
        case 13: 
          { lexeme=yytext(); return Negacion;
          }
        case 114: break;
        case 97: 
          { lexeme=yytext(); return NextDouble;
          }
        case 115: break;
        case 72: 
          { lexeme=yytext(); return Import;
          }
        case 116: break;
        case 56: 
          { lexeme=yytext(); return Case;
          }
        case 117: break;
        case 53: 
          { lexeme=yytext(); return This;
          }
        case 118: break;
        case 65: 
          { lexeme=yytext(); return Super;
          }
        case 119: break;
        case 78: 
          { lexeme=yytext(); return String;
          }
        case 120: break;
        case 4: 
          { /*Ignore*/
          }
        case 121: break;
        case 38: 
          { lexeme=yytext(); return Menor_o_igual;
          }
        case 122: break;
        case 39: 
          { lexeme=yytext(); return Mayor_o_igual;
          }
        case 123: break;
        case 87: 
          { lexeme=yytext(); return Private;
          }
        case 124: break;
        case 18: 
          { lexeme=yytext(); return Llave_c;
          }
        case 125: break;
        case 31: 
          { lexeme=yytext(); return Igual_que;
          }
        case 126: break;
        case 85: 
          { lexeme=yytext(); return Boolean;
          }
        case 127: break;
        case 1: 
          { return ERROR;
          }
        case 128: break;
        case 52: 
          { lexeme=yytext(); return True;
          }
        case 129: break;
        case 79: 
          { lexeme=yytext(); return SYstem;
          }
        case 130: break;
        case 44: 
          { lexeme=yytext(); return New;
          }
        case 131: break;
        case 26: 
          { lexeme=yytext(); return Coma;
          }
        case 132: break;
        case 67: 
          { lexeme=yytext(); return Class;
          }
        case 133: break;
        case 48: 
          { lexeme=yytext(); return Out;
          }
        case 134: break;
        case 29: 
          { lexeme=yytext(); return Do;
          }
        case 135: break;
        case 27: 
          { lexeme=yytext(); return In;
          }
        case 136: break;
        case 21: 
          { lexeme=yytext(); return P_coma;
          }
        case 137: break;
        case 20: 
          { lexeme=yytext(); return Corchete_c;
          }
        case 138: break;
        case 8: 
          { lexeme=yytext(); return Resta;
          }
        case 139: break;
        case 33: 
          { lexeme=yytext(); return Incremento;
          }
        case 140: break;
        case 96: 
          { lexeme=yytext(); return InstanceOf;
          }
        case 141: break;
        case 61: 
          { lexeme=yytext(); return Void;
          }
        case 142: break;
        case 40: 
          { lexeme=yytext(); return Distinto_que;
          }
        case 143: break;
        case 43: 
          { lexeme=yytext(); return Int;
          }
        case 144: break;
        case 62: 
          { lexeme=yytext(); return Final;
          }
        case 145: break;
        case 81: 
          { lexeme=yytext(); return NextInt;
          }
        case 146: break;
        case 30: 
          { lexeme=yytext(); return Division_combinada;
          }
        case 147: break;
        case 34: 
          { lexeme=yytext(); return Resta_combinada;
          }
        case 148: break;
        case 64: 
          { lexeme=yytext(); return False;
          }
        case 149: break;
        case 6: 
          { lexeme=yytext(); return Igual;
          }
        case 150: break;
        case 73: 
          { lexeme=yytext(); return Static;
          }
        case 151: break;
        case 71: 
          { lexeme=yytext(); return Print;
          }
        case 152: break;
        case 7: 
          { lexeme=yytext(); return Suma;
          }
        case 153: break;
        case 50: 
          { lexeme=yytext(); return Next;
          }
        case 154: break;
        case 63: 
          { lexeme=yytext(); return Float;
          }
        case 155: break;
        case 17: 
          { lexeme=yytext(); return Llave_a;
          }
        case 156: break;
        case 75: 
          { lexeme=yytext(); return Return;
          }
        case 157: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 158: break;
        case 76: 
          { lexeme=yytext(); return Delete;
          }
        case 159: break;
        case 46: 
          { lexeme=yytext(); return For;
          }
        case 160: break;
        case 55: 
          { lexeme=yytext(); return Long;
          }
        case 161: break;
        case 49: 
          { lexeme=yytext(); return Get;
          }
        case 162: break;
        case 25: 
          { lexeme=yytext(); return Punto;
          }
        case 163: break;
        case 82: 
          { lexeme=yytext(); return Console;
          }
        case 164: break;
        case 28: 
          { lexeme=yytext(); return If;
          }
        case 165: break;
        case 35: 
          { lexeme=yytext(); return Decremento;
          }
        case 166: break;
        case 92: 
          { lexeme=yytext(); return Continue;
          }
        case 167: break;
        case 77: 
          { lexeme=yytext(); return Double;
          }
        case 168: break;
        case 51: 
          { lexeme=yytext(); return Null;
          }
        case 169: break;
        case 11: 
          { lexeme=yytext(); return Menor_que;
          }
        case 170: break;
        case 19: 
          { lexeme=yytext(); return Corchete_a;
          }
        case 171: break;
        case 14: 
          { lexeme=yytext(); return NOT;
          }
        case 172: break;
        case 16: 
          { lexeme=yytext(); return Parentesis_c;
          }
        case 173: break;
        case 41: 
          { lexeme=yytext(); return OR;
          }
        case 174: break;
        case 90: 
          { lexeme=yytext(); return NextLong;
          }
        case 175: break;
        case 83: 
          { lexeme=yytext(); return Default;
          }
        case 176: break;
        case 80: 
          { lexeme=yytext(); return Public;
          }
        case 177: break;
        case 45: 
          { lexeme=yytext(); return Try;
          }
        case 178: break;
        case 91: 
          { lexeme=yytext(); return Function;
          }
        case 179: break;
        case 88: 
          { lexeme=yytext(); return Package;
          }
        case 180: break;
        case 94: 
          { lexeme=yytext(); return NextFloat;
          }
        case 181: break;
        case 57: 
          { lexeme=yytext(); return Char;
          }
        case 182: break;
        case 36: 
          { lexeme=yytext(); return Producto_combinado;
          }
        case 183: break;
        case 74: 
          { lexeme=yytext(); return Switch;
          }
        case 184: break;
        case 22: 
          { lexeme=yytext(); return Dos_puntos;
          }
        case 185: break;
        case 23: 
          { lexeme=yytext(); return Comillas;
          }
        case 186: break;
        case 37: 
          { lexeme=yytext(); return Residuo_combinado;
          }
        case 187: break;
        case 95: 
          { lexeme=yytext(); return Protected;
          }
        case 188: break;
        case 5: 
          { lexeme=yytext(); return Division;
          }
        case 189: break;
        case 66: 
          { lexeme=yytext(); return Short;
          }
        case 190: break;
        case 12: 
          { lexeme=yytext(); return Mayor_que;
          }
        case 191: break;
        case 9: 
          { lexeme=yytext(); return Multiplicacion;
          }
        case 192: break;
        case 10: 
          { lexeme=yytext(); return Residuo;
          }
        case 193: break;
        case 60: 
          { lexeme=yytext(); return Byte;
          }
        case 194: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
