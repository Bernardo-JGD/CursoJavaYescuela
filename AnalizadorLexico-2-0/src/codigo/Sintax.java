
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jul 12 19:19:27 CDT 2021
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jul 12 19:19:27 CDT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\254\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\005\000\002\004\004\000\002\004\005\000" +
    "\002\005\011\000\002\006\007\000\002\006\010\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\016\000\002\010\016\000\002\010\017\000\002\010\017" +
    "\000\002\011\003\000\002\011\004\000\002\011\003\000" +
    "\002\011\004\000\002\011\003\000\002\011\004\000\002" +
    "\011\003\000\002\011\004\000\002\011\003\000\002\011" +
    "\004\000\002\011\003\000\002\011\004\000\002\011\003" +
    "\000\002\011\004\000\002\011\003\000\002\011\004\000" +
    "\002\011\003\000\002\011\004\000\002\011\003\000\002" +
    "\011\004\000\002\011\003\000\002\011\004\000\002\011" +
    "\003\000\002\012\015\000\002\013\012\000\002\013\013" +
    "\000\002\014\003\000\002\014\003\000\002\015\004\000" +
    "\002\016\004\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\020\003\000\002\020\005\000\002\020\003\000" +
    "\002\020\005\000\002\021\005\000\002\021\004\000\002" +
    "\021\004\000\002\022\004\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\026\005\000\002\030\005\000\002" +
    "\027\006\000\002\027\006\000\002\031\006\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\033\003\000\002\033\003\000\002\034\007\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\036" +
    "\003\000\002\036\003\000\002\037\005\000\002\037\006" +
    "\000\002\037\006\000\002\037\007\000\002\040\006\000" +
    "\002\045\004\000\002\041\005\000\002\041\007\000\002" +
    "\041\003\000\002\041\004\000\002\041\003\000\002\041" +
    "\010\000\002\041\007\000\002\041\005\000\002\041\005" +
    "\000\002\041\006\000\002\041\011\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\044\005\000\002\044\006" +
    "\000\002\044\006\000\002\044\007\000\002\044\007\000" +
    "\002\044\010\000\002\046\011\000\002\047\003\000\002" +
    "\047\004\000\002\050\005\000\002\050\006\000\002\050" +
    "\007\000\002\050\010\000\002\050\004\000\002\050\005" +
    "\000\002\050\006\000\002\050\007\000\002\051\007\000" +
    "\002\051\015\000\002\051\007\000\002\051\015\000\002" +
    "\051\011\000\002\051\022\000\002\051\011\000\002\051" +
    "\022\000\002\052\010\000\002\053\004\000\002\053\004" +
    "\000\002\054\010\000\002\054\011\000\002\055\012\000" +
    "\002\055\013\000\002\056\015\000\002\056\014\000\002" +
    "\056\015\000\002\056\014\000\002\056\013\000\002\056" +
    "\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017d\000\012\051\006\052\004\053\013\061\005\001" +
    "\002\000\004\013\ufff4\001\002\000\004\141\u0175\001\002" +
    "\000\004\013\ufff5\001\002\000\004\013\020\001\002\000" +
    "\010\051\006\052\004\053\013\001\002\000\012\051\ufffd" +
    "\052\ufffd\053\ufffd\061\005\001\002\000\004\002\uffff\001" +
    "\002\000\004\013\ufff3\001\002\000\004\002\015\001\002" +
    "\000\004\002\001\001\002\000\010\051\ufffc\052\ufffc\053" +
    "\ufffc\001\002\000\004\002\000\001\002\000\004\141\021" +
    "\001\002\000\004\127\022\001\002\000\006\051\025\130" +
    "\023\001\002\000\004\002\ufff7\001\002\000\004\130\u0173" +
    "\001\002\000\004\064\026\001\002\000\004\060\027\001" +
    "\002\000\004\012\030\001\002\000\004\125\031\001\002" +
    "\000\004\035\032\001\002\000\006\131\033\141\034\001" +
    "\002\000\004\132\u016c\001\002\000\004\131\035\001\002" +
    "\000\004\132\036\001\002\000\004\126\037\001\002\000" +
    "\004\127\040\001\002\000\046\004\065\005\047\007\067" +
    "\014\071\027\075\030\064\035\100\036\073\037\051\040" +
    "\076\041\043\042\066\043\062\044\105\054\050\062\070" +
    "\130\044\141\101\001\002\000\004\133\u016b\001\002\000" +
    "\054\004\065\005\047\007\067\011\uffdc\014\071\027\075" +
    "\030\064\033\uffdc\035\100\036\073\037\051\040\076\041" +
    "\043\042\066\043\062\044\105\054\050\062\070\075\uffdc" +
    "\130\uffdc\141\101\001\002\000\006\131\uffcb\141\uffcb\001" +
    "\002\000\004\130\ufff2\001\002\000\054\004\065\005\047" +
    "\007\067\011\uffda\014\071\027\075\030\064\033\uffda\035" +
    "\100\036\073\037\051\040\076\041\043\042\066\043\062" +
    "\044\105\054\050\062\070\075\uffda\130\uffda\141\101\001" +
    "\002\000\054\004\065\005\047\007\067\011\uffe8\014\071" +
    "\027\075\030\064\033\uffe8\035\100\036\073\037\051\040" +
    "\076\041\043\042\066\043\062\044\105\054\050\062\070" +
    "\075\uffe8\130\uffe8\141\101\001\002\000\004\125\u0165\001" +
    "\002\000\004\137\u0159\001\002\000\006\131\uffcd\141\uffcd" +
    "\001\002\000\054\004\065\005\047\007\067\011\uffde\014" +
    "\071\027\075\030\064\033\uffde\035\100\036\073\037\051" +
    "\040\076\041\043\042\066\043\062\044\105\054\050\062" +
    "\070\075\uffde\130\uffde\141\101\001\002\000\054\004\uff97" +
    "\005\uff97\007\uff97\011\uff97\014\uff97\027\uff97\030\uff97\033" +
    "\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97" +
    "\043\uff97\044\uff97\054\uff97\062\uff97\075\uff97\130\uff97\141" +
    "\uff97\001\002\000\004\133\u0157\001\002\000\054\004\065" +
    "\005\047\007\067\011\uffee\014\071\027\075\030\064\033" +
    "\uffee\035\100\036\073\037\051\040\076\041\043\042\066" +
    "\043\062\044\105\054\050\062\070\075\uffee\130\uffee\141" +
    "\101\001\002\000\004\076\u0153\001\002\000\054\004\065" +
    "\005\047\007\067\011\uffe4\014\071\027\075\030\064\033" +
    "\uffe4\035\100\036\073\037\051\040\076\041\043\042\066" +
    "\043\062\044\105\054\050\062\070\075\uffe4\130\uffe4\141" +
    "\101\001\002\000\012\011\uffd8\033\uffd8\075\uffd8\130\uffd8" +
    "\001\002\000\046\004\065\005\047\007\067\014\071\027" +
    "\075\030\064\035\100\036\073\037\051\040\076\041\043" +
    "\042\066\043\062\044\105\054\050\062\070\127\u013f\141" +
    "\101\001\002\000\006\131\uffc9\141\uffc9\001\002\000\056" +
    "\004\065\005\047\007\067\011\uffe2\014\071\027\075\030" +
    "\064\033\uffe2\035\100\036\073\037\051\040\076\041\043" +
    "\042\066\043\062\044\105\054\050\062\070\075\uffe2\076" +
    "\u0137\130\uffe2\141\101\001\002\000\004\125\u012f\001\002" +
    "\000\006\131\uffd0\141\uffd0\001\002\000\006\131\uffca\141" +
    "\uffca\001\002\000\004\125\u0111\001\002\000\004\141\u0107" +
    "\001\002\000\004\125\360\001\002\000\054\004\065\005" +
    "\047\007\067\011\uffec\014\071\027\075\030\064\033\uffec" +
    "\035\100\036\073\037\051\040\076\041\043\042\066\043" +
    "\062\044\105\054\050\062\070\075\uffec\130\uffec\141\101" +
    "\001\002\000\006\131\uffce\141\uffce\001\002\000\004\130" +
    "\356\001\002\000\004\127\271\001\002\000\006\131\uffcc" +
    "\141\uffcc\001\002\000\054\004\065\005\047\007\067\011" +
    "\uffe6\014\071\027\075\030\064\033\uffe6\035\100\036\073" +
    "\037\051\040\076\041\043\042\066\043\062\044\105\054" +
    "\050\062\070\075\uffe6\130\uffe6\141\101\001\002\000\006" +
    "\131\uffcf\141\uffcf\001\002\000\024\076\125\103\121\104" +
    "\123\114\114\115\124\116\120\117\115\120\113\131\147" +
    "\001\002\000\054\004\065\005\047\007\067\011\uffea\014" +
    "\071\027\075\030\064\033\uffea\035\100\036\073\037\051" +
    "\040\076\041\043\042\066\043\062\044\105\054\050\062" +
    "\070\075\uffea\130\uffea\141\101\001\002\000\054\004\065" +
    "\005\047\007\067\011\uffe0\014\071\027\075\030\064\033" +
    "\uffe0\035\100\036\073\037\051\040\076\041\043\042\066" +
    "\043\062\044\105\054\050\062\070\075\uffe0\130\uffe0\141" +
    "\101\001\002\000\054\004\uff96\005\uff96\007\uff96\011\uff96" +
    "\014\uff96\027\uff96\030\uff96\033\uff96\035\uff96\036\uff96\037" +
    "\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\054\uff96" +
    "\062\uff96\075\uff96\130\uff96\141\uff96\001\002\000\006\131" +
    "\uffc8\141\uffc8\001\002\000\006\131\111\141\112\001\002" +
    "\000\006\133\uffd1\134\uffd1\001\002\000\010\133\uffc5\134" +
    "\uffc5\140\264\001\002\000\004\132\234\001\002\000\030" +
    "\076\125\103\121\104\123\114\114\115\124\116\120\117" +
    "\115\120\113\131\117\133\uffc7\140\122\001\002\000\020" +
    "\046\uffba\047\uffba\050\uffba\125\uffba\141\uffba\142\uffba\143" +
    "\uffba\001\002\000\020\046\uffbe\047\uffbe\050\uffbe\125\uffbe" +
    "\141\uffbe\142\uffbe\143\uffbe\001\002\000\020\046\uffbb\047" +
    "\uffbb\050\uffbb\125\uffbb\141\uffbb\142\uffbb\143\uffbb\001\002" +
    "\000\020\046\220\047\215\050\221\125\140\141\216\142" +
    "\137\143\141\001\002\000\004\132\130\001\002\000\020" +
    "\046\uffbc\047\uffbc\050\uffbc\125\uffbc\141\uffbc\142\uffbc\143" +
    "\uffbc\001\002\000\012\126\uffc2\133\uffc2\134\uffc2\140\uffc2" +
    "\001\002\000\004\141\127\001\002\000\012\126\uffc1\133" +
    "\uffc1\134\uffc1\140\uffc1\001\002\000\020\046\uffbd\047\uffbd" +
    "\050\uffbd\125\uffbd\141\uffbd\142\uffbd\143\uffbd\001\002\000" +
    "\020\046\uffbf\047\uffbf\050\uffbf\125\uffbf\141\uffbf\142\uffbf" +
    "\143\uffbf\001\002\000\006\133\uffc6\134\uffc6\001\002\000" +
    "\030\076\125\103\121\104\123\114\114\115\124\116\120" +
    "\117\115\120\113\133\uffc7\134\uffc7\140\122\001\002\000" +
    "\010\076\133\131\132\133\131\001\002\000\056\004\uff68" +
    "\005\uff68\007\uff68\011\uff68\014\uff68\027\uff68\030\uff68\033" +
    "\uff68\035\uff68\036\uff68\037\uff68\040\uff68\041\uff68\042\uff68" +
    "\043\uff68\044\uff68\054\uff68\062\uff68\075\uff68\076\uff68\130" +
    "\uff68\141\uff68\001\002\000\004\132\176\001\002\000\004" +
    "\022\134\001\002\000\024\004\065\035\100\036\073\037" +
    "\051\040\076\041\043\042\066\043\062\044\105\001\002" +
    "\000\004\131\136\001\002\000\012\125\140\141\145\142" +
    "\137\143\141\001\002\000\062\077\uffb5\100\uffb5\101\uffb5" +
    "\102\uffb5\106\uffb5\107\uffb5\110\uffb5\111\uffb5\112\uffb5\113" +
    "\uffb5\122\uffb5\123\uffb5\124\uffb5\125\uffb5\126\uffb5\130\uffb5" +
    "\132\uffb5\133\uffb5\134\uffb5\137\171\140\uffb5\141\uffb5\142" +
    "\uffb5\143\uffb5\001\002\000\012\125\140\141\145\142\137" +
    "\143\141\001\002\000\060\077\uffb2\100\uffb2\101\uffb2\102" +
    "\uffb2\106\uffb2\107\uffb2\110\uffb2\111\uffb2\112\uffb2\113\uffb2" +
    "\122\uffb2\123\uffb2\124\uffb2\125\uffb2\126\uffb2\130\uffb2\132" +
    "\uffb2\133\uffb2\134\uffb2\140\uffb2\141\uffb2\142\uffb2\143\uffb2" +
    "\001\002\000\060\077\uffb4\100\uffb4\101\uffb4\102\uffb4\106" +
    "\uffb4\107\uffb4\110\uffb4\111\uffb4\112\uffb4\113\uffb4\122\uffb4" +
    "\123\uffb4\124\uffb4\125\uffb4\126\uffb4\130\uffb4\132\uffb4\133" +
    "\uffb4\134\uffb4\140\uffb4\141\uffb4\142\uffb4\143\uffb4\001\002" +
    "\000\060\077\uffb0\100\uffb0\101\uffb0\102\uffb0\106\uffb0\107" +
    "\uffb0\110\uffb0\111\uffb0\112\uffb0\113\uffb0\122\uffb0\123\uffb0" +
    "\124\uffb0\125\uffb0\126\uffb0\130\uffb0\132\uffb0\133\uffb0\134" +
    "\uffb0\140\uffb0\141\uffb0\142\uffb0\143\uffb0\001\002\000\014" +
    "\077\161\100\160\101\162\102\156\132\157\001\002\000" +
    "\062\077\uffb3\100\uffb3\101\uffb3\102\uffb3\106\uffb3\107\uffb3" +
    "\110\uffb3\111\uffb3\112\uffb3\113\uffb3\122\uffb3\123\uffb3\124" +
    "\uffb3\125\uffb3\126\uffb3\130\uffb3\131\147\132\uffb3\133\uffb3" +
    "\137\150\140\uffb3\141\uffb3\142\uffb3\143\uffb3\001\002\000" +
    "\060\077\uffb1\100\uffb1\101\uffb1\102\uffb1\106\uffb1\107\uffb1" +
    "\110\uffb1\111\uffb1\112\uffb1\113\uffb1\122\uffb1\123\uffb1\124" +
    "\uffb1\125\uffb1\126\uffb1\130\uffb1\132\uffb1\133\uffb1\134\uffb1" +
    "\140\uffb1\141\uffb1\142\uffb1\143\uffb1\001\002\000\006\141" +
    "\153\142\152\001\002\000\004\141\151\001\002\000\060" +
    "\077\uffa8\100\uffa8\101\uffa8\102\uffa8\106\uffa8\107\uffa8\110" +
    "\uffa8\111\uffa8\112\uffa8\113\uffa8\122\uffa8\123\uffa8\124\uffa8" +
    "\125\uffa8\126\uffa8\130\uffa8\132\uffa8\133\uffa8\134\uffa8\140" +
    "\uffa8\141\uffa8\142\uffa8\143\uffa8\001\002\000\004\132\155" +
    "\001\002\000\004\132\154\001\002\000\062\076\uffa6\077" +
    "\uffa6\100\uffa6\101\uffa6\102\uffa6\106\uffa6\107\uffa6\110\uffa6" +
    "\111\uffa6\112\uffa6\113\uffa6\122\uffa6\123\uffa6\124\uffa6\125" +
    "\uffa6\126\uffa6\130\uffa6\132\uffa6\133\uffa6\134\uffa6\140\uffa6" +
    "\141\uffa6\142\uffa6\143\uffa6\001\002\000\062\076\uffa7\077" +
    "\uffa7\100\uffa7\101\uffa7\102\uffa7\106\uffa7\107\uffa7\110\uffa7" +
    "\111\uffa7\112\uffa7\113\uffa7\122\uffa7\123\uffa7\124\uffa7\125" +
    "\uffa7\126\uffa7\130\uffa7\132\uffa7\133\uffa7\134\uffa7\140\uffa7" +
    "\141\uffa7\142\uffa7\143\uffa7\001\002\000\010\141\uffa1\142" +
    "\uffa1\143\uffa1\001\002\000\004\133\173\001\002\000\010" +
    "\141\uffa3\142\uffa3\143\uffa3\001\002\000\010\141\uffa4\142" +
    "\uffa4\143\uffa4\001\002\000\010\141\uffa2\142\uffa2\143\uffa2" +
    "\001\002\000\010\141\167\142\164\143\165\001\002\000" +
    "\062\077\uffae\100\uffae\101\uffae\102\uffae\106\uffae\107\uffae" +
    "\110\uffae\111\uffae\112\uffae\113\uffae\122\uffae\123\uffae\124" +
    "\uffae\125\uffae\126\uffae\130\uffae\132\uffae\133\uffae\134\uffae" +
    "\137\171\140\uffae\141\uffae\142\uffae\143\uffae\001\002\000" +
    "\060\077\uffac\100\uffac\101\uffac\102\uffac\106\uffac\107\uffac" +
    "\110\uffac\111\uffac\112\uffac\113\uffac\122\uffac\123\uffac\124" +
    "\uffac\125\uffac\126\uffac\130\uffac\132\uffac\133\uffac\134\uffac" +
    "\140\uffac\141\uffac\142\uffac\143\uffac\001\002\000\060\077" +
    "\uffaa\100\uffaa\101\uffaa\102\uffaa\106\uffaa\107\uffaa\110\uffaa" +
    "\111\uffaa\112\uffaa\113\uffaa\122\uffaa\123\uffaa\124\uffaa\125" +
    "\uffaa\126\uffaa\130\uffaa\132\uffaa\133\uffaa\134\uffaa\140\uffaa" +
    "\141\uffaa\142\uffaa\143\uffaa\001\002\000\062\077\uffad\100" +
    "\uffad\101\uffad\102\uffad\106\uffad\107\uffad\110\uffad\111\uffad" +
    "\112\uffad\113\uffad\122\uffad\123\uffad\124\uffad\125\uffad\126" +
    "\uffad\130\uffad\131\147\132\uffad\133\uffad\134\uffad\140\uffad" +
    "\141\uffad\142\uffad\143\uffad\001\002\000\060\077\uffab\100" +
    "\uffab\101\uffab\102\uffab\106\uffab\107\uffab\110\uffab\111\uffab" +
    "\112\uffab\113\uffab\122\uffab\123\uffab\124\uffab\125\uffab\126" +
    "\uffab\130\uffab\132\uffab\133\uffab\134\uffab\140\uffab\141\uffab" +
    "\142\uffab\143\uffab\001\002\000\004\142\172\001\002\000" +
    "\060\077\uffa9\100\uffa9\101\uffa9\102\uffa9\106\uffa9\107\uffa9" +
    "\110\uffa9\111\uffa9\112\uffa9\113\uffa9\122\uffa9\123\uffa9\124" +
    "\uffa9\125\uffa9\126\uffa9\130\uffa9\132\uffa9\133\uffa9\134\uffa9" +
    "\140\uffa9\141\uffa9\142\uffa9\143\uffa9\001\002\000\056\004" +
    "\uff67\005\uff67\007\uff67\011\uff67\014\uff67\027\uff67\030\uff67" +
    "\033\uff67\035\uff67\036\uff67\037\uff67\040\uff67\041\uff67\042" +
    "\uff67\043\uff67\044\uff67\054\uff67\062\uff67\075\uff67\076\uff67" +
    "\130\uff67\141\uff67\001\002\000\014\077\161\100\160\101" +
    "\162\102\156\126\175\001\002\000\060\077\uffaf\100\uffaf" +
    "\101\uffaf\102\uffaf\106\uffaf\107\uffaf\110\uffaf\111\uffaf\112" +
    "\uffaf\113\uffaf\122\uffaf\123\uffaf\124\uffaf\125\uffaf\126\uffaf" +
    "\130\uffaf\132\uffaf\133\uffaf\134\uffaf\140\uffaf\141\uffaf\142" +
    "\uffaf\143\uffaf\001\002\000\006\076\200\133\177\001\002" +
    "\000\056\004\uff64\005\uff64\007\uff64\011\uff64\014\uff64\027" +
    "\uff64\030\uff64\033\uff64\035\uff64\036\uff64\037\uff64\040\uff64" +
    "\041\uff64\042\uff64\043\uff64\044\uff64\054\uff64\062\uff64\075" +
    "\uff64\076\uff64\130\uff64\141\uff64\001\002\000\004\022\201" +
    "\001\002\000\024\004\065\035\100\036\073\037\051\040" +
    "\076\041\043\042\066\043\062\044\105\001\002\000\004" +
    "\131\203\001\002\000\012\125\140\141\145\142\137\143" +
    "\141\001\002\000\014\077\161\100\160\101\162\102\156" +
    "\132\205\001\002\000\004\131\206\001\002\000\012\125" +
    "\140\141\145\142\137\143\141\001\002\000\014\077\161" +
    "\100\160\101\162\102\156\132\210\001\002\000\004\133" +
    "\211\001\002\000\056\004\uff63\005\uff63\007\uff63\011\uff63" +
    "\014\uff63\027\uff63\030\uff63\033\uff63\035\uff63\036\uff63\037" +
    "\uff63\040\uff63\041\uff63\042\uff63\043\uff63\044\uff63\054\uff63" +
    "\062\uff63\075\uff63\076\uff63\130\uff63\141\uff63\001\002\000" +
    "\012\126\uffb8\133\uffb8\134\uffb8\140\uffb8\001\002\000\012" +
    "\126\uffb7\133\uffb7\134\uffb7\140\uffb7\001\002\000\012\126" +
    "\uffc3\133\uffc3\134\uffc3\140\uffc3\001\002\000\020\122\uff9f" +
    "\123\uff9f\124\uff9f\126\uff9f\133\uff9f\134\uff9f\140\uff9f\001" +
    "\002\000\026\077\uffb3\100\uffb3\101\uffb3\102\uffb3\126\uffb3" +
    "\131\147\133\uffb3\134\uffb3\137\222\140\uffb3\001\002\000" +
    "\022\077\161\100\160\101\162\102\156\126\uffb9\133\uffb9" +
    "\134\uffb9\140\uffb9\001\002\000\020\122\uffa0\123\uffa0\124" +
    "\uffa0\126\uffa0\133\uffa0\134\uffa0\140\uffa0\001\002\000\012" +
    "\126\uffb6\133\uffb6\134\uffb6\140\uffb6\001\002\000\020\067" +
    "\230\070\227\071\226\072\231\073\224\074\223\141\151" +
    "\001\002\000\004\125\uff98\001\002\000\004\125\uff99\001" +
    "\002\000\004\125\232\001\002\000\004\125\uff9b\001\002" +
    "\000\004\125\uff9c\001\002\000\004\125\uff9d\001\002\000" +
    "\004\125\uff9a\001\002\000\004\126\233\001\002\000\012" +
    "\126\uff9e\133\uff9e\134\uff9e\140\uff9e\001\002\000\006\131" +
    "\235\141\236\001\002\000\004\132\247\001\002\000\006" +
    "\076\240\133\237\001\002\000\056\004\uff6a\005\uff6a\007" +
    "\uff6a\011\uff6a\014\uff6a\027\uff6a\030\uff6a\033\uff6a\035\uff6a" +
    "\036\uff6a\037\uff6a\040\uff6a\041\uff6a\042\uff6a\043\uff6a\044" +
    "\uff6a\054\uff6a\062\uff6a\075\uff6a\076\uff6a\130\uff6a\141\uff6a" +
    "\001\002\000\004\022\241\001\002\000\024\004\065\035" +
    "\100\036\073\037\051\040\076\041\043\042\066\043\062" +
    "\044\105\001\002\000\004\131\243\001\002\000\012\125" +
    "\140\141\145\142\137\143\141\001\002\000\014\077\161" +
    "\100\160\101\162\102\156\132\245\001\002\000\004\133" +
    "\246\001\002\000\056\004\uff69\005\uff69\007\uff69\011\uff69" +
    "\014\uff69\027\uff69\030\uff69\033\uff69\035\uff69\036\uff69\037" +
    "\uff69\040\uff69\041\uff69\042\uff69\043\uff69\044\uff69\054\uff69" +
    "\062\uff69\075\uff69\076\uff69\130\uff69\141\uff69\001\002\000" +
    "\004\141\250\001\002\000\006\076\252\133\251\001\002" +
    "\000\056\004\uff66\005\uff66\007\uff66\011\uff66\014\uff66\027" +
    "\uff66\030\uff66\033\uff66\035\uff66\036\uff66\037\uff66\040\uff66" +
    "\041\uff66\042\uff66\043\uff66\044\uff66\054\uff66\062\uff66\075" +
    "\uff66\076\uff66\130\uff66\141\uff66\001\002\000\004\022\253" +
    "\001\002\000\024\004\065\035\100\036\073\037\051\040" +
    "\076\041\043\042\066\043\062\044\105\001\002\000\004" +
    "\131\255\001\002\000\012\125\140\141\145\142\137\143" +
    "\141\001\002\000\014\077\161\100\160\101\162\102\156" +
    "\132\257\001\002\000\004\131\260\001\002\000\012\125" +
    "\140\141\145\142\137\143\141\001\002\000\014\077\161" +
    "\100\160\101\162\102\156\132\262\001\002\000\004\133" +
    "\263\001\002\000\056\004\uff65\005\uff65\007\uff65\011\uff65" +
    "\014\uff65\027\uff65\030\uff65\033\uff65\035\uff65\036\uff65\037" +
    "\uff65\040\uff65\041\uff65\042\uff65\043\uff65\044\uff65\054\uff65" +
    "\062\uff65\075\uff65\076\uff65\130\uff65\141\uff65\001\002\000" +
    "\004\141\127\001\002\000\006\133\uffc4\134\uffc4\001\002" +
    "\000\012\011\uffdf\033\uffdf\075\uffdf\130\uffdf\001\002\000" +
    "\012\011\uffe9\033\uffe9\075\uffe9\130\uffe9\001\002\000\012" +
    "\011\uffe5\033\uffe5\075\uffe5\130\uffe5\001\002\000\046\004" +
    "\065\005\047\007\067\014\071\027\075\030\064\035\100" +
    "\036\073\037\051\040\076\041\043\042\066\043\062\044" +
    "\105\054\050\062\070\130\272\141\101\001\002\000\004" +
    "\030\351\001\002\000\004\130\274\001\002\000\004\030" +
    "\275\001\002\000\004\125\276\001\002\000\020\046\220" +
    "\047\215\121\301\125\300\141\303\142\137\143\141\001" +
    "\002\000\014\122\uff8d\123\uff8d\124\uff8d\126\uff8d\133\uff8d" +
    "\001\002\000\012\125\140\141\145\142\137\143\141\001" +
    "\002\000\012\125\337\141\145\142\137\143\141\001\002" +
    "\000\026\077\161\100\160\101\162\102\156\106\324\107" +
    "\317\110\321\111\323\112\325\113\322\001\002\000\044" +
    "\077\uffb3\100\uffb3\101\uffb3\102\uffb3\106\uffb3\107\uffb3\110" +
    "\uffb3\111\uffb3\112\uffb3\113\uffb3\122\uff8b\123\uff8b\124\uff8b" +
    "\126\uff8b\131\147\133\uff8b\137\150\001\002\000\012\122" +
    "\305\123\307\124\306\126\310\001\002\000\020\046\uff7c" +
    "\047\uff7c\121\uff7c\125\uff7c\141\uff7c\142\uff7c\143\uff7c\001" +
    "\002\000\020\046\uff7e\047\uff7e\121\uff7e\125\uff7e\141\uff7e" +
    "\142\uff7e\143\uff7e\001\002\000\020\046\uff7d\047\uff7d\121" +
    "\uff7d\125\uff7d\141\uff7d\142\uff7d\143\uff7d\001\002\000\004" +
    "\133\334\001\002\000\020\046\220\047\215\121\314\125" +
    "\313\141\316\142\137\143\141\001\002\000\014\122\uff88" +
    "\123\uff88\124\uff88\126\uff88\133\uff88\001\002\000\012\125" +
    "\140\141\145\142\137\143\141\001\002\000\012\125\140" +
    "\141\145\142\137\143\141\001\002\000\026\077\161\100" +
    "\160\101\162\102\156\106\324\107\317\110\321\111\323" +
    "\112\325\113\322\001\002\000\044\077\uffb3\100\uffb3\101" +
    "\uffb3\102\uffb3\106\uffb3\107\uffb3\110\uffb3\111\uffb3\112\uffb3" +
    "\113\uffb3\122\uff87\123\uff87\124\uff87\126\uff87\131\147\133" +
    "\uff87\137\150\001\002\000\012\125\uff83\141\uff83\142\uff83" +
    "\143\uff83\001\002\000\012\125\140\141\145\142\137\143" +
    "\141\001\002\000\012\125\uff82\141\uff82\142\uff82\143\uff82" +
    "\001\002\000\012\125\uff7f\141\uff7f\142\uff7f\143\uff7f\001" +
    "\002\000\012\125\uff81\141\uff81\142\uff81\143\uff81\001\002" +
    "\000\012\125\uff84\141\uff84\142\uff84\143\uff84\001\002\000" +
    "\012\125\uff80\141\uff80\142\uff80\143\uff80\001\002\000\024" +
    "\077\161\100\160\101\162\102\156\122\uff89\123\uff89\124" +
    "\uff89\126\uff89\133\uff89\001\002\000\024\077\161\100\160" +
    "\101\162\102\156\122\uff86\123\uff86\124\uff86\126\uff86\133" +
    "\uff86\001\002\000\030\077\161\100\160\101\162\102\156" +
    "\106\324\107\317\110\321\111\323\112\325\113\322\126" +
    "\175\001\002\000\012\125\140\141\145\142\137\143\141" +
    "\001\002\000\014\077\161\100\160\101\162\102\156\126" +
    "\333\001\002\000\014\122\uff85\123\uff85\124\uff85\126\uff85" +
    "\133\uff85\001\002\000\054\004\uff5c\005\uff5c\007\uff5c\011" +
    "\uff5c\014\uff5c\027\uff5c\030\uff5c\033\uff5c\035\uff5c\036\uff5c" +
    "\037\uff5c\040\uff5c\041\uff5c\042\uff5c\043\uff5c\044\uff5c\054" +
    "\uff5c\062\uff5c\075\uff5c\130\uff5c\141\uff5c\001\002\000\012" +
    "\125\140\141\145\142\137\143\141\001\002\000\024\077" +
    "\161\100\160\101\162\102\156\122\uff8f\123\uff8f\124\uff8f" +
    "\126\uff8f\133\uff8f\001\002\000\012\125\140\141\145\142" +
    "\137\143\141\001\002\000\024\077\161\100\160\101\162" +
    "\102\156\122\uff8c\123\uff8c\124\uff8c\126\uff8c\133\uff8c\001" +
    "\002\000\030\077\161\100\160\101\162\102\156\106\324" +
    "\107\317\110\321\111\323\112\325\113\322\126\175\001" +
    "\002\000\012\125\140\141\145\142\137\143\141\001\002" +
    "\000\014\077\161\100\160\101\162\102\156\126\344\001" +
    "\002\000\014\122\uff8a\123\uff8a\124\uff8a\126\uff8a\133\uff8a" +
    "\001\002\000\030\077\161\100\160\101\162\102\156\106" +
    "\324\107\317\110\321\111\323\112\325\113\322\126\175" +
    "\001\002\000\012\125\140\141\145\142\137\143\141\001" +
    "\002\000\014\077\161\100\160\101\162\102\156\126\350" +
    "\001\002\000\014\122\uff8e\123\uff8e\124\uff8e\126\uff8e\133" +
    "\uff8e\001\002\000\004\125\352\001\002\000\020\046\220" +
    "\047\215\121\301\125\300\141\303\142\137\143\141\001" +
    "\002\000\012\122\305\123\307\124\306\126\354\001\002" +
    "\000\004\133\355\001\002\000\054\004\uff5d\005\uff5d\007" +
    "\uff5d\011\uff5d\014\uff5d\027\uff5d\030\uff5d\033\uff5d\035\uff5d" +
    "\036\uff5d\037\uff5d\040\uff5d\041\uff5d\042\uff5d\043\uff5d\044" +
    "\uff5d\054\uff5d\062\uff5d\075\uff5d\130\uff5d\141\uff5d\001\002" +
    "\000\004\130\ufff0\001\002\000\012\011\uffeb\033\uffeb\075" +
    "\uffeb\130\uffeb\001\002\000\020\046\220\047\215\050\221" +
    "\125\140\141\216\142\137\143\141\001\002\000\004\126" +
    "\362\001\002\000\004\127\363\001\002\000\006\011\364" +
    "\033\365\001\002\000\020\046\220\047\215\050\221\125" +
    "\140\141\216\142\137\143\141\001\002\000\004\134\372" +
    "\001\002\000\010\011\364\033\365\130\uff74\001\002\000" +
    "\004\130\370\001\002\000\054\004\uff75\005\uff75\007\uff75" +
    "\011\uff75\014\uff75\027\uff75\030\uff75\033\uff75\035\uff75\036" +
    "\uff75\037\uff75\040\uff75\041\uff75\042\uff75\043\uff75\044\uff75" +
    "\054\uff75\062\uff75\075\uff75\130\uff75\141\uff75\001\002\000" +
    "\004\130\uff73\001\002\000\054\004\065\005\047\007\067" +
    "\011\uff6e\014\071\027\075\030\064\033\uff6e\035\100\036" +
    "\073\037\051\040\076\041\043\042\066\043\062\044\105" +
    "\054\050\062\070\075\373\130\uff6e\141\101\001\002\000" +
    "\004\133\377\001\002\000\012\011\uff6d\033\uff6d\075\375" +
    "\130\uff6d\001\002\000\004\133\376\001\002\000\010\011" +
    "\uff6b\033\uff6b\130\uff6b\001\002\000\010\011\uff6c\033\uff6c" +
    "\130\uff6c\001\002\000\004\134\u0101\001\002\000\054\004" +
    "\065\005\047\007\067\011\uff72\014\071\027\075\030\064" +
    "\033\uff72\035\100\036\073\037\051\040\076\041\043\042" +
    "\066\043\062\044\105\054\050\062\070\075\u0102\130\uff72" +
    "\141\101\001\002\000\004\133\u0106\001\002\000\012\011" +
    "\uff71\033\uff71\075\u0104\130\uff71\001\002\000\004\133\u0105" +
    "\001\002\000\010\011\uff6f\033\uff6f\130\uff6f\001\002\000" +
    "\010\011\uff70\033\uff70\130\uff70\001\002\000\004\076\u0108" +
    "\001\002\000\004\022\u0109\001\002\000\004\062\u010a\001" +
    "\002\000\004\125\u010b\001\002\000\004\054\u010c\001\002" +
    "\000\004\137\u010d\001\002\000\004\024\u010e\001\002\000" +
    "\004\126\u010f\001\002\000\004\133\u0110\001\002\000\054" +
    "\004\uffd7\005\uffd7\007\uffd7\011\uffd7\014\uffd7\027\uffd7\030" +
    "\uffd7\033\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7" +
    "\042\uffd7\043\uffd7\044\uffd7\054\uffd7\062\uffd7\075\uffd7\130" +
    "\uffd7\141\uffd7\001\002\000\026\004\065\035\100\036\073" +
    "\037\051\040\076\041\043\042\066\043\062\044\105\141" +
    "\u0114\001\002\000\006\133\u011f\134\u0120\001\002\000\004" +
    "\133\u0116\001\002\000\022\076\125\103\121\104\123\114" +
    "\114\115\124\116\120\117\115\120\113\001\002\000\004" +
    "\141\127\001\002\000\020\046\220\047\215\121\301\125" +
    "\300\141\303\142\137\143\141\001\002\000\012\122\305" +
    "\123\307\124\306\133\u0118\001\002\000\004\141\u0114\001" +
    "\002\000\004\126\u011a\001\002\000\004\127\u011b\001\002" +
    "\000\046\004\065\005\047\007\067\014\071\027\075\030" +
    "\064\035\100\036\073\037\051\040\076\041\043\042\066" +
    "\043\062\044\105\054\050\062\070\130\u011c\141\101\001" +
    "\002\000\054\004\uff58\005\uff58\007\uff58\011\uff58\014\uff58" +
    "\027\uff58\030\uff58\033\uff58\035\uff58\036\uff58\037\uff58\040" +
    "\uff58\041\uff58\042\uff58\043\uff58\044\uff58\054\uff58\062\uff58" +
    "\075\uff58\130\uff58\141\uff58\001\002\000\004\130\u011e\001" +
    "\002\000\054\004\uff59\005\uff59\007\uff59\011\uff59\014\uff59" +
    "\027\uff59\030\uff59\033\uff59\035\uff59\036\uff59\037\uff59\040" +
    "\uff59\041\uff59\042\uff59\043\uff59\044\uff59\054\uff59\062\uff59" +
    "\075\uff59\130\uff59\141\uff59\001\002\000\020\046\220\047" +
    "\215\121\301\125\300\141\303\142\137\143\141\001\002" +
    "\000\004\141\u0121\001\002\000\004\126\u0122\001\002\000" +
    "\004\127\u0123\001\002\000\046\004\065\005\047\007\067" +
    "\014\071\027\075\030\064\035\100\036\073\037\051\040" +
    "\076\041\043\042\066\043\062\044\105\054\050\062\070" +
    "\130\u0124\141\101\001\002\000\054\004\uff56\005\uff56\007" +
    "\uff56\011\uff56\014\uff56\027\uff56\030\uff56\033\uff56\035\uff56" +
    "\036\uff56\037\uff56\040\uff56\041\uff56\042\uff56\043\uff56\044" +
    "\uff56\054\uff56\062\uff56\075\uff56\130\uff56\141\uff56\001\002" +
    "\000\004\130\u0126\001\002\000\054\004\uff57\005\uff57\007" +
    "\uff57\011\uff57\014\uff57\027\uff57\030\uff57\033\uff57\035\uff57" +
    "\036\uff57\037\uff57\040\uff57\041\uff57\042\uff57\043\uff57\044" +
    "\uff57\054\uff57\062\uff57\075\uff57\130\uff57\141\uff57\001\002" +
    "\000\012\122\305\123\307\124\306\133\u0128\001\002\000" +
    "\004\141\u0114\001\002\000\004\126\u012a\001\002\000\004" +
    "\127\u012b\001\002\000\046\004\065\005\047\007\067\014" +
    "\071\027\075\030\064\035\100\036\073\037\051\040\076" +
    "\041\043\042\066\043\062\044\105\054\050\062\070\130" +
    "\u012c\141\101\001\002\000\054\004\uff5a\005\uff5a\007\uff5a" +
    "\011\uff5a\014\uff5a\027\uff5a\030\uff5a\033\uff5a\035\uff5a\036" +
    "\uff5a\037\uff5a\040\uff5a\041\uff5a\042\uff5a\043\uff5a\044\uff5a" +
    "\054\uff5a\062\uff5a\075\uff5a\130\uff5a\141\uff5a\001\002\000" +
    "\004\130\u012e\001\002\000\054\004\uff5b\005\uff5b\007\uff5b" +
    "\011\uff5b\014\uff5b\027\uff5b\030\uff5b\033\uff5b\035\uff5b\036" +
    "\uff5b\037\uff5b\040\uff5b\041\uff5b\042\uff5b\043\uff5b\044\uff5b" +
    "\054\uff5b\062\uff5b\075\uff5b\130\uff5b\141\uff5b\001\002\000" +
    "\020\046\220\047\215\121\301\125\300\141\303\142\137" +
    "\143\141\001\002\000\012\122\305\123\307\124\306\126" +
    "\u0131\001\002\000\004\127\u0132\001\002\000\046\004\065" +
    "\005\047\007\067\014\071\027\075\030\064\035\100\036" +
    "\073\037\051\040\076\041\043\042\066\043\062\044\105" +
    "\054\050\062\070\130\u0133\141\101\001\002\000\054\004" +
    "\uff5f\005\uff5f\007\uff5f\011\uff5f\014\uff5f\027\uff5f\030\uff5f" +
    "\033\uff5f\035\uff5f\036\uff5f\037\uff5f\040\uff5f\041\uff5f\042" +
    "\uff5f\043\uff5f\044\uff5f\054\uff5f\062\uff5f\075\uff5f\130\uff5f" +
    "\141\uff5f\001\002\000\004\130\u0135\001\002\000\054\004" +
    "\uff5e\005\uff5e\007\uff5e\011\uff5e\014\uff5e\027\uff5e\030\uff5e" +
    "\033\uff5e\035\uff5e\036\uff5e\037\uff5e\040\uff5e\041\uff5e\042" +
    "\uff5e\043\uff5e\044\uff5e\054\uff5e\062\uff5e\075\uff5e\130\uff5e" +
    "\141\uff5e\001\002\000\012\011\uffe1\033\uffe1\075\uffe1\130" +
    "\uffe1\001\002\000\004\127\u0138\001\002\000\012\125\140" +
    "\141\145\142\137\143\141\001\002\000\014\077\161\100" +
    "\160\101\162\102\156\140\u013e\001\002\000\014\125\140" +
    "\130\u013b\141\145\142\137\143\141\001\002\000\004\133" +
    "\u013d\001\002\000\024\077\161\100\160\101\162\102\156" +
    "\125\uff60\130\uff60\141\uff60\142\uff60\143\uff60\001\002\000" +
    "\054\004\uff62\005\uff62\007\uff62\011\uff62\014\uff62\027\uff62" +
    "\030\uff62\033\uff62\035\uff62\036\uff62\037\uff62\040\uff62\041" +
    "\uff62\042\uff62\043\uff62\044\uff62\054\uff62\062\uff62\075\uff62" +
    "\130\uff62\141\uff62\001\002\000\014\125\uff61\130\uff61\141" +
    "\uff61\142\uff61\143\uff61\001\002\000\046\004\065\005\047" +
    "\007\067\014\071\027\075\030\064\035\100\036\073\037" +
    "\051\040\076\041\043\042\066\043\062\044\105\054\050" +
    "\062\070\130\u0141\141\101\001\002\000\012\011\uff90\033" +
    "\uff90\075\uff90\130\uff90\001\002\000\056\004\uff95\005\uff95" +
    "\006\u0144\007\uff95\011\uff95\014\uff95\027\uff95\030\uff95\033" +
    "\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95" +
    "\043\uff95\044\uff95\054\uff95\062\uff95\075\uff95\130\uff95\141" +
    "\uff95\001\002\000\004\130\u0143\001\002\000\056\004\uff94" +
    "\005\uff94\006\u0144\007\uff94\011\uff94\014\uff94\027\uff94\030" +
    "\uff94\033\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94" +
    "\042\uff94\043\uff94\044\uff94\054\uff94\062\uff94\075\uff94\130" +
    "\uff94\141\uff94\001\002\000\006\005\047\127\u0146\001\002" +
    "\000\054\004\uff92\005\uff92\007\uff92\011\uff92\014\uff92\027" +
    "\uff92\030\uff92\033\uff92\035\uff92\036\uff92\037\uff92\040\uff92" +
    "\041\uff92\042\uff92\043\uff92\044\uff92\054\uff92\062\uff92\075" +
    "\uff92\130\uff92\141\uff92\001\002\000\046\004\065\005\047" +
    "\007\067\014\071\027\075\030\064\035\100\036\073\037" +
    "\051\040\076\041\043\042\066\043\062\044\105\054\050" +
    "\062\070\130\u014e\141\101\001\002\000\004\127\u0148\001" +
    "\002\000\046\004\065\005\047\007\067\014\071\027\075" +
    "\030\064\035\100\036\073\037\051\040\076\041\043\042" +
    "\066\043\062\044\105\054\050\062\070\130\u0149\141\101" +
    "\001\002\000\056\004\uff79\005\uff79\006\u0144\007\uff79\011" +
    "\uff79\014\uff79\027\uff79\030\uff79\033\uff79\035\uff79\036\uff79" +
    "\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79\044\uff79\054" +
    "\uff79\062\uff79\075\uff79\130\uff79\141\uff79\001\002\000\004" +
    "\130\u014b\001\002\000\056\004\uff78\005\uff78\006\u0144\007" +
    "\uff78\011\uff78\014\uff78\027\uff78\030\uff78\033\uff78\035\uff78" +
    "\036\uff78\037\uff78\040\uff78\041\uff78\042\uff78\043\uff78\044" +
    "\uff78\054\uff78\062\uff78\075\uff78\130\uff78\141\uff78\001\002" +
    "\000\054\004\uff76\005\uff76\007\uff76\011\uff76\014\uff76\027" +
    "\uff76\030\uff76\033\uff76\035\uff76\036\uff76\037\uff76\040\uff76" +
    "\041\uff76\042\uff76\043\uff76\044\uff76\054\uff76\062\uff76\075" +
    "\uff76\130\uff76\141\uff76\001\002\000\054\004\uff77\005\uff77" +
    "\007\uff77\011\uff77\014\uff77\027\uff77\030\uff77\033\uff77\035" +
    "\uff77\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77" +
    "\044\uff77\054\uff77\062\uff77\075\uff77\130\uff77\141\uff77\001" +
    "\002\000\054\004\uff7b\005\uff7b\007\uff7b\011\uff7b\014\uff7b" +
    "\027\uff7b\030\uff7b\033\uff7b\035\uff7b\036\uff7b\037\uff7b\040" +
    "\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\054\uff7b\062\uff7b" +
    "\075\uff7b\130\uff7b\141\uff7b\001\002\000\004\130\u0150\001" +
    "\002\000\054\004\uff7a\005\uff7a\007\uff7a\011\uff7a\014\uff7a" +
    "\027\uff7a\030\uff7a\033\uff7a\035\uff7a\036\uff7a\037\uff7a\040" +
    "\uff7a\041\uff7a\042\uff7a\043\uff7a\044\uff7a\054\uff7a\062\uff7a" +
    "\075\uff7a\130\uff7a\141\uff7a\001\002\000\054\004\uff93\005" +
    "\uff93\007\uff93\011\uff93\014\uff93\027\uff93\030\uff93\033\uff93" +
    "\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043" +
    "\uff93\044\uff93\054\uff93\062\uff93\075\uff93\130\uff93\141\uff93" +
    "\001\002\000\012\011\uffe3\033\uffe3\075\uffe3\130\uffe3\001" +
    "\002\000\020\046\220\047\215\050\221\125\140\141\216" +
    "\142\137\143\141\001\002\000\004\133\u0155\001\002\000" +
    "\054\004\uffa5\005\uffa5\007\uffa5\011\uffa5\014\uffa5\027\uffa5" +
    "\030\uffa5\033\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\044\uffa5\054\uffa5\062\uffa5\075\uffa5" +
    "\130\uffa5\141\uffa5\001\002\000\012\011\uffed\033\uffed\075" +
    "\uffed\130\uffed\001\002\000\054\004\uffc0\005\uffc0\007\uffc0" +
    "\011\uffc0\014\uffc0\027\uffc0\030\uffc0\033\uffc0\035\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0" +
    "\054\uffc0\062\uffc0\075\uffc0\130\uffc0\141\uffc0\001\002\000" +
    "\012\011\uffdd\033\uffdd\075\uffdd\130\uffdd\001\002\000\004" +
    "\057\u015a\001\002\000\004\137\u015b\001\002\000\006\055" +
    "\u015c\056\u015e\001\002\000\004\125\uffd4\001\002\000\004" +
    "\125\u015f\001\002\000\004\125\uffd3\001\002\000\014\125" +
    "\140\126\u0160\141\145\142\137\143\141\001\002\000\004" +
    "\133\u0164\001\002\000\014\077\161\100\160\101\162\102" +
    "\156\126\u0162\001\002\000\004\133\u0163\001\002\000\054" +
    "\004\uffd5\005\uffd5\007\uffd5\011\uffd5\014\uffd5\027\uffd5\030" +
    "\uffd5\033\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\054\uffd5\062\uffd5\075\uffd5\130" +
    "\uffd5\141\uffd5\001\002\000\054\004\uffd6\005\uffd6\007\uffd6" +
    "\011\uffd6\014\uffd6\027\uffd6\030\uffd6\033\uffd6\035\uffd6\036" +
    "\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6" +
    "\054\uffd6\062\uffd6\075\uffd6\130\uffd6\141\uffd6\001\002\000" +
    "\020\046\220\047\215\121\301\125\300\141\303\142\137" +
    "\143\141\001\002\000\012\122\305\123\307\124\306\126" +
    "\u0167\001\002\000\046\004\uff91\005\uff91\007\uff91\014\uff91" +
    "\027\uff91\030\uff91\035\uff91\036\uff91\037\uff91\040\uff91\041" +
    "\uff91\042\uff91\043\uff91\044\uff91\054\uff91\062\uff91\127\uff91" +
    "\141\uff91\001\002\000\012\011\uffe7\033\uffe7\075\uffe7\130" +
    "\uffe7\001\002\000\012\011\uffd9\033\uffd9\075\uffd9\130\uffd9" +
    "\001\002\000\012\011\uffdb\033\uffdb\075\uffdb\130\uffdb\001" +
    "\002\000\054\004\uffd2\005\uffd2\007\uffd2\011\uffd2\014\uffd2" +
    "\027\uffd2\030\uffd2\033\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\054\uffd2\062\uffd2" +
    "\075\uffd2\130\uffd2\141\uffd2\001\002\000\004\141\u016d\001" +
    "\002\000\004\126\u016e\001\002\000\004\127\u016f\001\002" +
    "\000\046\004\065\005\047\007\067\014\071\027\075\030" +
    "\064\035\100\036\073\037\051\040\076\041\043\042\066" +
    "\043\062\044\105\054\050\062\070\130\u0170\141\101\001" +
    "\002\000\004\130\ufff1\001\002\000\004\130\u0172\001\002" +
    "\000\004\130\uffef\001\002\000\004\002\ufff6\001\002\000" +
    "\012\051\ufffe\052\ufffe\053\ufffe\061\005\001\002\000\006" +
    "\133\u0176\137\u0177\001\002\000\012\051\ufffa\052\ufffa\053" +
    "\ufffa\061\ufffa\001\002\000\004\141\u0179\001\002\000\012" +
    "\051\ufff9\052\ufff9\053\ufff9\061\ufff9\001\002\000\006\133" +
    "\u0176\137\u017a\001\002\000\006\062\u017b\141\u017c\001\002" +
    "\000\004\133\u017e\001\002\000\006\133\u0176\137\u017d\001" +
    "\002\000\004\141\u017c\001\002\000\012\051\ufff8\052\ufff8" +
    "\053\ufff8\061\ufff8\001\002\000\010\051\ufffb\052\ufffb\053" +
    "\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017d\000\014\002\013\003\007\005\010\006\011\007" +
    "\006\001\001\000\002\001\001\000\004\004\u0173\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\016\007" +
    "\006\001\001\000\006\003\015\005\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\011" +
    "\073\012\054\013\071\015\101\016\040\017\105\021\053" +
    "\022\045\027\055\031\076\036\056\037\052\040\060\045" +
    "\057\046\103\051\062\052\102\054\051\055\041\056\044" +
    "\001\001\000\002\001\001\000\052\011\u0169\012\054\013" +
    "\071\015\101\016\040\017\105\021\053\022\045\027\055" +
    "\031\076\036\056\037\052\040\060\045\057\046\103\051" +
    "\062\052\102\054\051\055\041\056\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\011\u0168\012\054\013" +
    "\071\015\101\016\040\017\105\021\053\022\045\027\055" +
    "\031\076\036\056\037\052\040\060\045\057\046\103\051" +
    "\062\052\102\054\051\055\041\056\044\001\001\000\052" +
    "\011\u0167\012\054\013\071\015\101\016\040\017\105\021" +
    "\053\022\045\027\055\031\076\036\056\037\052\040\060" +
    "\045\057\046\103\051\062\052\102\054\051\055\041\056" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\011\u0157\012\054\013\071\015\101\016" +
    "\040\017\105\021\053\022\045\027\055\031\076\036\056" +
    "\037\052\040\060\045\057\046\103\051\062\052\102\054" +
    "\051\055\041\056\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\011\u0155\012\054\013\071\015\101\016" +
    "\040\017\105\021\053\022\045\027\055\031\076\036\056" +
    "\037\052\040\060\045\057\046\103\051\062\052\102\054" +
    "\051\055\041\056\044\001\001\000\002\001\001\000\052" +
    "\011\u0151\012\054\013\071\015\101\016\040\017\105\021" +
    "\053\022\045\027\055\031\076\036\056\037\052\040\060" +
    "\045\057\046\103\051\062\052\102\054\051\055\041\056" +
    "\044\001\001\000\002\001\001\000\052\011\u013f\012\054" +
    "\013\071\015\101\016\040\017\105\021\053\022\045\027" +
    "\055\031\076\036\056\037\052\040\060\045\057\046\103" +
    "\051\062\052\102\054\051\055\041\056\044\001\001\000" +
    "\002\001\001\000\052\011\u0135\012\054\013\071\015\101" +
    "\016\040\017\105\021\053\022\045\027\055\031\076\036" +
    "\056\037\052\040\060\045\057\046\103\051\062\052\102" +
    "\054\051\055\041\056\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\011\356\012\054\013" +
    "\071\015\101\016\040\017\105\021\053\022\045\027\055" +
    "\031\076\036\056\037\052\040\060\045\057\046\103\051" +
    "\062\052\102\054\051\055\041\056\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\011\267\012\054\013\071\015\101\016\040" +
    "\017\105\021\053\022\045\027\055\031\076\036\056\037" +
    "\052\040\060\045\057\046\103\051\062\052\102\054\051" +
    "\055\041\056\044\001\001\000\002\001\001\000\004\023" +
    "\115\001\001\000\052\011\266\012\054\013\071\015\101" +
    "\016\040\017\105\021\053\022\045\027\055\031\076\036" +
    "\056\037\052\040\060\045\057\046\103\051\062\052\102" +
    "\054\051\055\041\056\044\001\001\000\052\011\265\012" +
    "\054\013\071\015\101\016\040\017\105\021\053\022\045" +
    "\027\055\031\076\036\056\037\052\040\060\045\057\046" +
    "\103\051\062\052\102\054\051\055\041\056\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\106\021" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\024\213\025\216" +
    "\026\141\027\145\030\142\033\211\034\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\125\021\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\134\001\001\000\002" +
    "\001\001\000\012\025\143\026\141\027\145\030\142\001" +
    "\001\000\002\001\001\000\012\025\173\026\141\027\145" +
    "\030\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\165\027\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\201\001\001\000\002\001\001\000\012\025\203\026\141" +
    "\027\145\030\142\001\001\000\004\032\162\001\001\000" +
    "\002\001\001\000\012\025\206\026\141\027\145\030\142" +
    "\001\001\000\004\032\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\162\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\241\001" +
    "\001\000\002\001\001\000\012\025\243\026\141\027\145" +
    "\030\142\001\001\000\004\032\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\253\001" +
    "\001\000\002\001\001\000\012\025\255\026\141\027\145" +
    "\030\142\001\001\000\004\032\162\001\001\000\002\001" +
    "\001\000\012\025\260\026\141\027\145\030\142\001\001" +
    "\000\004\032\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\264\021\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\011\272\012\054\013\071\015\101\016\040\017\105" +
    "\021\053\022\045\027\055\031\076\036\056\037\052\040" +
    "\060\045\057\046\103\051\062\052\102\054\051\055\041" +
    "\056\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\025\301\026\141" +
    "\027\145\030\142\033\276\041\303\001\001\000\002\001" +
    "\001\000\012\025\344\026\141\027\145\030\142\001\001" +
    "\000\012\025\337\026\141\027\145\030\142\001\001\000" +
    "\006\032\162\042\334\001\001\000\002\001\001\000\004" +
    "\043\310\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\025\314\026\141" +
    "\027\145\030\142\033\311\001\001\000\002\001\001\000" +
    "\012\025\327\026\141\027\145\030\142\001\001\000\012" +
    "\025\326\026\141\027\145\030\142\001\001\000\006\032" +
    "\162\042\317\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\325\026\141\027\145\030\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\162\001\001\000" +
    "\004\032\162\001\001\000\006\032\162\042\330\001\001" +
    "\000\012\025\331\026\141\027\145\030\142\001\001\000" +
    "\004\032\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\335\026\141\027\145\030\142\001\001\000" +
    "\004\032\162\001\001\000\012\025\340\026\141\027\145" +
    "\030\142\001\001\000\004\032\162\001\001\000\006\032" +
    "\162\042\341\001\001\000\012\025\342\026\141\027\145" +
    "\030\142\001\001\000\004\032\162\001\001\000\002\001" +
    "\001\000\006\032\162\042\345\001\001\000\012\025\346" +
    "\026\141\027\145\030\142\001\001\000\004\032\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\025\301" +
    "\026\141\027\145\030\142\033\276\041\352\001\001\000" +
    "\004\043\310\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\024\360\025" +
    "\216\026\141\027\145\030\142\033\211\034\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\047\366\050" +
    "\365\001\001\000\020\024\377\025\216\026\141\027\145" +
    "\030\142\033\211\034\212\001\001\000\002\001\001\000" +
    "\006\047\370\050\365\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\011\373\012\054\013" +
    "\071\015\101\016\040\017\105\021\053\022\045\027\055" +
    "\031\076\036\056\037\052\040\060\045\057\046\103\051" +
    "\062\052\102\054\051\055\041\056\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\011\u0102" +
    "\012\054\013\071\015\101\016\040\017\105\021\053\022" +
    "\045\027\055\031\076\036\056\037\052\040\060\045\057" +
    "\046\103\051\062\052\102\054\051\055\041\056\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\u0111" +
    "\017\u0114\021\u0112\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\115\001\001\000\006\020\106\021\107" +
    "\001\001\000\016\025\301\026\141\027\145\030\142\033" +
    "\276\041\u0116\001\001\000\004\043\310\001\001\000\004" +
    "\021\u0118\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\011\u011c\012\054\013\071\015\101\016\040\017\105" +
    "\021\053\022\045\027\055\031\076\036\056\037\052\040" +
    "\060\045\057\046\103\051\062\052\102\054\051\055\041" +
    "\056\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\025\301\026\141\027\145\030\142" +
    "\033\276\041\u0126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\011\u0124\012\054\013\071" +
    "\015\101\016\040\017\105\021\053\022\045\027\055\031" +
    "\076\036\056\037\052\040\060\045\057\046\103\051\062" +
    "\052\102\054\051\055\041\056\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\310" +
    "\001\001\000\004\021\u0128\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\011\u012c\012\054\013\071\015\101" +
    "\016\040\017\105\021\053\022\045\027\055\031\076\036" +
    "\056\037\052\040\060\045\057\046\103\051\062\052\102" +
    "\054\051\055\041\056\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\025\301\026\141" +
    "\027\145\030\142\033\276\041\u012f\001\001\000\004\043" +
    "\310\001\001\000\002\001\001\000\052\011\u0133\012\054" +
    "\013\071\015\101\016\040\017\105\021\053\022\045\027" +
    "\055\031\076\036\056\037\052\040\060\045\057\046\103" +
    "\051\062\052\102\054\051\055\041\056\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\025\u0138\026\141\027" +
    "\145\030\142\053\u0139\001\001\000\004\032\162\001\001" +
    "\000\012\025\u013b\026\141\027\145\030\142\001\001\000" +
    "\002\001\001\000\004\032\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\011\u0141\012\054\013\071\015" +
    "\101\016\040\017\105\021\053\022\045\027\055\031\076" +
    "\036\056\037\052\040\060\045\057\046\103\051\062\052" +
    "\102\054\051\055\041\056\044\001\001\000\002\001\001" +
    "\000\004\044\u0150\001\001\000\002\001\001\000\004\044" +
    "\u0144\001\001\000\004\040\u0146\001\001\000\002\001\001" +
    "\000\052\011\u014e\012\054\013\071\015\101\016\040\017" +
    "\105\021\053\022\045\027\055\031\076\036\056\037\052" +
    "\040\060\045\057\046\103\051\062\052\102\054\051\055" +
    "\041\056\044\001\001\000\002\001\001\000\052\011\u0149" +
    "\012\054\013\071\015\101\016\040\017\105\021\053\022" +
    "\045\027\055\031\076\036\056\037\052\040\060\045\057" +
    "\046\103\051\062\052\102\054\051\055\041\056\044\001" +
    "\001\000\004\044\u014c\001\001\000\002\001\001\000\004" +
    "\044\u014b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\024\u0153\025\216\026" +
    "\141\027\145\030\142\033\211\034\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\u015c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\025\u0160\026\141\027\145" +
    "\030\142\001\001\000\002\001\001\000\004\032\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\025\301\026\141\027\145\030\142\033\276\041" +
    "\u0165\001\001\000\004\043\310\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\011\u0170\012\054\013\071\015\101\016" +
    "\040\017\105\021\053\022\045\027\055\031\076\036\056" +
    "\037\052\040\060\045\057\046\103\051\062\052\102\054" +
    "\051\055\041\056\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\u017e\005\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\u0177\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\u0177\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\u0177\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // BloqueFor ::= For Parentesis_a DeclararVariable Dos_puntos Identificador Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueFor",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // BloqueFor ::= For Parentesis_a DeclararVariable Dos_puntos Identificador Parentesis_c Llave_a BloqueCodigo Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueFor",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // BloqueFor ::= For Parentesis_a AsignandoValor P_coma Condiciones P_coma AsignandoValor Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueFor",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // BloqueFor ::= For Parentesis_a AsignandoValor P_coma Condiciones P_coma AsignandoValor Parentesis_c Llave_a BloqueCodigo Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueFor",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // BloqueFor ::= For Parentesis_a DeclararVariable P_coma Condiciones P_coma AsignandoValor Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueFor",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // BloqueFor ::= For Parentesis_a DeclararVariable P_coma Condiciones P_coma AsignandoValor Parentesis_c Llave_a BloqueCodigo Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueFor",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // BloqueDoWhile ::= Do Llave_a BloqueCodigo Llave_c While Parentesis_a Condiciones Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDoWhile",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // BloqueDoWhile ::= Do Llave_a Llave_c While Parentesis_a Condiciones Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueDoWhile",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // BloqueWhile ::= While Parentesis_a Condiciones Parentesis_c Llave_a BloqueCodigo Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueWhile",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // BloqueWhile ::= While Parentesis_a Condiciones Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueWhile",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ValoreRellenoArreglo ::= ValoreRellenoArreglo ExpresionAritmetica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ValoreRellenoArreglo",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ValoreRellenoArreglo ::= ExpresionAritmetica Coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ValoreRellenoArreglo",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // RellenarArreglo ::= DeclaracionArreglo Igual Llave_a ValoreRellenoArreglo Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RellenarArreglo",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // DeclaracionArreglo ::= TipoDato Identificador Corchete_a Corchete_c Corchete_a Corchete_c Igual New TipoDato Corchete_a ExpresionAritmetica Corchete_c Corchete_a ExpresionAritmetica Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionArreglo",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // DeclaracionArreglo ::= TipoDato Identificador Corchete_a Corchete_c Corchete_a Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionArreglo",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // DeclaracionArreglo ::= TipoDato Corchete_a Corchete_c Corchete_a Corchete_c Identificador Igual New TipoDato Corchete_a ExpresionAritmetica Corchete_c Corchete_a ExpresionAritmetica Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionArreglo",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // DeclaracionArreglo ::= TipoDato Corchete_a Corchete_c Corchete_a Corchete_c Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionArreglo",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // DeclaracionArreglo ::= TipoDato Identificador Corchete_a Corchete_c Igual New TipoDato Corchete_a ExpresionAritmetica Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionArreglo",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // DeclaracionArreglo ::= TipoDato Identificador Corchete_a Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionArreglo",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // DeclaracionArreglo ::= TipoDato Corchete_a Corchete_c Identificador Igual New TipoDato Corchete_a ExpresionAritmetica Corchete_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionArreglo",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // DeclaracionArreglo ::= TipoDato Corchete_a Corchete_c Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclaracionArreglo",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // BloqueCase ::= Default Dos_puntos BloqueCodigo Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCase",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // BloqueCase ::= Default Dos_puntos Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCase",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // BloqueCase ::= Default Dos_puntos BloqueCodigo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCase",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // BloqueCase ::= Default Dos_puntos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCase",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // BloqueCase ::= Case Valores Dos_puntos BloqueCodigo Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCase",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // BloqueCase ::= Case Valores Dos_puntos Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCase",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // BloqueCase ::= Case Valores Dos_puntos BloqueCodigo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCase",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // BloqueCase ::= Case Valores Dos_puntos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCase",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ReglaCase ::= BloqueCase ReglaCase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReglaCase",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ReglaCase ::= BloqueCase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReglaCase",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // BloqueSwitch ::= Switch Parentesis_a Valores Parentesis_c Llave_a ReglaCase Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueSwitch",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // BloqueElse ::= Else ReglaIf Llave_a BloqueCodigo Llave_c BloqueElse 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueElse",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // BloqueElse ::= Else ReglaIf Llave_a Llave_c BloqueElse 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueElse",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // BloqueElse ::= Else ReglaIf Llave_a BloqueCodigo Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueElse",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // BloqueElse ::= Else ReglaIf Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueElse",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // BloqueElse ::= Else Llave_a BloqueCodigo Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueElse",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // BloqueElse ::= Else Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueElse",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OperadoresLogicos ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresLogicos",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OperadoresLogicos ::= OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresLogicos",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OperadoresLogicos ::= AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresLogicos",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OperadoresRelacionales ::= Mayor_o_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresRelacionales",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OperadoresRelacionales ::= Menor_o_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresRelacionales",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OperadoresRelacionales ::= Distinto_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresRelacionales",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OperadoresRelacionales ::= Igual_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresRelacionales",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OperadoresRelacionales ::= Mayor_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresRelacionales",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OperadoresRelacionales ::= Menor_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresRelacionales",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Condiciones ::= Condiciones OperadoresLogicos Parentesis_a ExpresionAritmetica OperadoresRelacionales ExpresionAritmetica Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condiciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Condiciones ::= Condiciones OperadoresLogicos Negacion ExpresionAritmetica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condiciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Condiciones ::= Condiciones OperadoresLogicos Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condiciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Condiciones ::= Condiciones OperadoresLogicos ValorBoolean 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condiciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Condiciones ::= Condiciones OperadoresLogicos ExpresionAritmetica OperadoresRelacionales ExpresionAritmetica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condiciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Condiciones ::= Negacion Parentesis_a ExpresionAritmetica OperadoresRelacionales ExpresionAritmetica Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condiciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Condiciones ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condiciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Condiciones ::= Negacion ExpresionAritmetica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condiciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Condiciones ::= ValorBoolean 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condiciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Condiciones ::= Parentesis_a ExpresionAritmetica OperadoresRelacionales ExpresionAritmetica Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condiciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Condiciones ::= ExpresionAritmetica OperadoresRelacionales ExpresionAritmetica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condiciones",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ReglaIfElse ::= ReglaIf BloqueCodigo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReglaIfElse",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ReglaIf ::= If Parentesis_a Condiciones Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReglaIf",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // BloqueIf ::= ReglaIf Llave_a BloqueCodigo Llave_c BloqueElse 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueIf",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // BloqueIf ::= ReglaIf Llave_a Llave_c BloqueElse 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueIf",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // BloqueIf ::= ReglaIf Llave_a BloqueCodigo Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueIf",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // BloqueIf ::= ReglaIf Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueIf",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ControlesDeFlujo ::= BloqueSwitch 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ControlesDeFlujo",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ControlesDeFlujo ::= BloqueIf 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ControlesDeFlujo",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TipoEntrada ::= Next 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoEntrada",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TipoEntrada ::= NextLong 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoEntrada",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TipoEntrada ::= NextByte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoEntrada",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TipoEntrada ::= NextFloat 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoEntrada",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TipoEntrada ::= NextDouble 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoEntrada",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TipoEntrada ::= NextInt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoEntrada",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EntradaTeclado ::= Identificador Punto TipoEntrada Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EntradaTeclado",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ValorBoolean ::= False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ValorBoolean",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ValorBoolean ::= True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ValorBoolean",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OperadoresAritmeticos ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresAritmeticos",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OperadoresAritmeticos ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresAritmeticos",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OperadoresAritmeticos ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresAritmeticos",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OperadoresAritmeticos ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresAritmeticos",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // InicializarPosicionArreglo ::= ValorArreglo Igual Valores P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicializarPosicionArreglo",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ValorArreglo ::= Identificador Corchete_a Identificador Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ValorArreglo",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ValorArreglo ::= Identificador Corchete_a Numero Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ValorArreglo",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TamArregglo ::= Identificador Punto Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TamArregglo",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ValorDecimal ::= Numero Punto Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ValorDecimal",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ExpresionAritmetica ::= ExpresionAritmetica OperadoresAritmeticos ValorDecimal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ExpresionAritmetica ::= ExpresionAritmetica OperadoresAritmeticos ValorArreglo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ExpresionAritmetica ::= ExpresionAritmetica OperadoresAritmeticos TS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ExpresionAritmetica ::= ExpresionAritmetica OperadoresAritmeticos Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ExpresionAritmetica ::= ExpresionAritmetica OperadoresAritmeticos Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ExpresionAritmetica ::= Parentesis_a ExpresionAritmetica Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ExpresionAritmetica ::= TamArregglo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ExpresionAritmetica ::= ValorArreglo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ExpresionAritmetica ::= TS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ExpresionAritmetica ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ExpresionAritmetica ::= ValorDecimal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ExpresionAritmetica ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Valores ::= Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Valores",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Valores ::= EntradaTeclado 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Valores",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Valores ::= ValorBoolean 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Valores",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Valores ::= ExpresionAritmetica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Valores",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OperadorAsignacion ::= Residuo_combinado 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OperadorAsignacion ::= Division_combinada 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OperadorAsignacion ::= Producto_combinado 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OperadorAsignacion ::= Resta_combinada 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OperadorAsignacion ::= Suma_combinada 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OperadorAsignacion ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Inicializar ::= AsignandoValor P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicializar",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // AsignandoValor ::= Identificador Decremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsignandoValor",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // AsignandoValor ::= Identificador Incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsignandoValor",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AsignandoValor ::= Identificador OperadorAsignacion Valores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsignandoValor",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DeclararOInicializar ::= AsignandoValor Coma DeclararOInicializar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclararOInicializar",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DeclararOInicializar ::= AsignandoValor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclararOInicializar",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DeclararOInicializar ::= Identificador Coma DeclararOInicializar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclararOInicializar",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DeclararOInicializar ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclararOInicializar",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TipoDato ::= Boolean 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDato",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TipoDato ::= Long 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDato",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TipoDato ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDato",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TipoDato ::= Double 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDato",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TipoDato ::= Short 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDato",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TipoDato ::= Byte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDato",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TipoDato ::= Char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDato",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TipoDato ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDato",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TipoDato ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDato",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DeclararVariable ::= TipoDato DeclararOInicializar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclararVariable",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // AgregandoVariables ::= DeclararVariable P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AgregandoVariables",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TipoImpresion ::= Print 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoImpresion",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TipoImpresion ::= Println 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoImpresion",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ImprimirPantalla ::= SYstem Punto Out Punto TipoImpresion Parentesis_a ExpresionAritmetica Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ImprimirPantalla",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ImprimirPantalla ::= SYstem Punto Out Punto TipoImpresion Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ImprimirPantalla",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DeclarandoEscaner ::= SCanner Identificador Igual New SCanner Parentesis_a SYstem Punto In Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclarandoEscaner",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BloqueCodigo ::= ReglaIfElse 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BloqueCodigo ::= BloqueFor BloqueCodigo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BloqueCodigo ::= BloqueFor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BloqueCodigo ::= BloqueDoWhile BloqueCodigo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BloqueCodigo ::= BloqueDoWhile 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BloqueCodigo ::= BloqueWhile BloqueCodigo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BloqueCodigo ::= BloqueWhile 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BloqueCodigo ::= RellenarArreglo BloqueCodigo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BloqueCodigo ::= RellenarArreglo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BloqueCodigo ::= DeclaracionArreglo BloqueCodigo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // BloqueCodigo ::= DeclaracionArreglo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BloqueCodigo ::= ControlesDeFlujo BloqueCodigo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BloqueCodigo ::= ControlesDeFlujo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BloqueCodigo ::= InicializarPosicionArreglo BloqueCodigo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BloqueCodigo ::= InicializarPosicionArreglo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BloqueCodigo ::= Inicializar BloqueCodigo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BloqueCodigo ::= Inicializar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BloqueCodigo ::= AgregandoVariables BloqueCodigo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BloqueCodigo ::= AgregandoVariables 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BloqueCodigo ::= ImprimirPantalla BloqueCodigo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BloqueCodigo ::= ImprimirPantalla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BloqueCodigo ::= DeclarandoEscaner BloqueCodigo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BloqueCodigo ::= DeclarandoEscaner 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MetodoMain ::= Public Static Void Main Parentesis_a String Corchete_a Corchete_c Identificador Parentesis_c Llave_a BloqueCodigo Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MetodoMain",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MetodoMain ::= Public Static Void Main Parentesis_a String Identificador Corchete_a Corchete_c Parentesis_c Llave_a BloqueCodigo Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MetodoMain",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MetodoMain ::= Public Static Void Main Parentesis_a String Corchete_a Corchete_c Identificador Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MetodoMain",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MetodoMain ::= Public Static Void Main Parentesis_a String Identificador Corchete_a Corchete_c Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MetodoMain",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TipoAcceso ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoAcceso",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TipoAcceso ::= Protected 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoAcceso",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TipoAcceso ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoAcceso",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DeclararClase ::= TipoAcceso Class Identificador Llave_a MetodoMain Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclararClase",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DeclararClase ::= TipoAcceso Class Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclararClase",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LlamandoScanner ::= Import Identificador Punto Identificador Punto SCanner P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LlamandoScanner",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LlamarLibreria ::= Identificador Punto LlamarLibreria 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LlamarLibreria",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LlamarLibreria ::= Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LlamarLibreria",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ImportarLibrerias ::= Import LlamarLibreria ImportarLibrerias 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ImportarLibrerias",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ImportarLibrerias ::= LlamandoScanner ImportarLibrerias 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ImportarLibrerias",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ImportarLibrerias ::= LlamandoScanner 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ImportarLibrerias",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ImportarLibrerias ::= Import LlamarLibreria 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ImportarLibrerias",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Raiz ::= DeclararClase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Raiz",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Raiz ::= ImportarLibrerias DeclararClase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Raiz",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Raiz EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

