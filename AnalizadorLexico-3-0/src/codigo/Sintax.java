
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jul 12 02:32:09 CDT 2021
//----------------------------------------------------

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jul 12 02:32:09 CDT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\005\000\002\004\004\000\002\004\005\000" +
    "\002\005\011\000\002\006\007\000\002\006\010\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\016\000\002\010\016\000\002\010\017\000\002\010\017" +
    "\000\002\011\003\000\002\011\004\000\002\011\003\000" +
    "\002\011\004\000\002\011\003\000\002\011\004\000\002" +
    "\011\003\000\002\011\004\000\002\011\003\000\002\011" +
    "\004\000\002\011\003\000\002\011\004\000\002\012\015" +
    "\000\002\013\012\000\002\013\013\000\002\014\003\000" +
    "\002\014\003\000\002\015\004\000\002\016\004\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\020\003\000" +
    "\002\020\005\000\002\020\003\000\002\020\005\000\002" +
    "\021\005\000\002\021\004\000\002\021\004\000\002\022" +
    "\004\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\026\005\000\002\027\006\000\002" +
    "\027\006\000\002\030\006\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\032\003" +
    "\000\002\032\003\000\002\033\007\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\035\003\000\002\036" +
    "\005\000\002\036\006\000\002\036\006\000\002\036\007" +
    "\000\002\037\006\000\002\040\005\000\002\040\007\000" +
    "\002\040\003\000\002\040\004\000\002\040\010\000\002" +
    "\040\007\000\002\040\005\000\002\040\006\000\002\040" +
    "\011\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\043\005\000\002\043\006\000\002\043\006\000\002\043" +
    "\007\000\002\043\007\000\002\043\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\012\051\006\052\004\053\013\061\005\001" +
    "\002\000\004\013\ufff4\001\002\000\004\141\333\001\002" +
    "\000\004\013\ufff5\001\002\000\004\013\020\001\002\000" +
    "\010\051\006\052\004\053\013\001\002\000\012\051\ufffd" +
    "\052\ufffd\053\ufffd\061\005\001\002\000\004\002\uffff\001" +
    "\002\000\004\013\ufff3\001\002\000\004\002\015\001\002" +
    "\000\004\002\001\001\002\000\010\051\ufffc\052\ufffc\053" +
    "\ufffc\001\002\000\004\002\000\001\002\000\004\141\021" +
    "\001\002\000\004\127\022\001\002\000\006\051\025\130" +
    "\023\001\002\000\004\002\ufff7\001\002\000\004\130\331" +
    "\001\002\000\004\064\026\001\002\000\004\060\027\001" +
    "\002\000\004\012\030\001\002\000\004\125\031\001\002" +
    "\000\004\035\032\001\002\000\006\131\033\141\034\001" +
    "\002\000\004\132\322\001\002\000\004\131\035\001\002" +
    "\000\004\132\036\001\002\000\004\126\037\001\002\000" +
    "\004\127\040\001\002\000\036\004\056\005\064\035\070" +
    "\036\043\037\044\040\061\041\060\042\050\043\072\044" +
    "\073\054\053\062\065\130\057\141\054\001\002\000\004" +
    "\127\300\001\002\000\036\004\056\005\064\035\070\036" +
    "\043\037\044\040\061\041\060\042\050\043\072\044\073" +
    "\054\053\062\065\130\uffe6\141\054\001\002\000\004\141" +
    "\uffd9\001\002\000\004\141\uffd8\001\002\000\004\076\274" +
    "\001\002\000\036\004\056\005\064\035\070\036\043\037" +
    "\044\040\061\041\060\042\050\043\072\044\073\054\053" +
    "\062\065\130\uffea\141\054\001\002\000\036\004\056\005" +
    "\064\035\070\036\043\037\044\040\061\041\060\042\050" +
    "\043\072\044\073\054\053\062\065\130\uffe8\141\054\001" +
    "\002\000\004\141\uffd5\001\002\000\004\141\265\001\002" +
    "\000\036\004\uffa5\005\uffa5\035\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\054\uffa5\062\uffa5" +
    "\130\uffa5\141\uffa5\001\002\000\004\137\247\001\002\000" +
    "\024\076\226\103\223\104\224\114\217\115\225\116\222" +
    "\117\220\120\216\131\161\001\002\000\036\004\056\005" +
    "\064\035\070\036\043\037\044\040\061\041\060\042\050" +
    "\043\072\044\073\054\053\062\065\130\uffec\141\054\001" +
    "\002\000\004\141\uffdb\001\002\000\004\130\ufff2\001\002" +
    "\000\004\141\uffd6\001\002\000\004\141\uffd7\001\002\000" +
    "\004\130\214\001\002\000\004\133\213\001\002\000\004" +
    "\125\111\001\002\000\004\141\077\001\002\000\004\133" +
    "\076\001\002\000\036\004\056\005\064\035\070\036\043" +
    "\037\044\040\061\041\060\042\050\043\072\044\073\054" +
    "\053\062\065\130\uffe4\141\054\001\002\000\004\141\uffda" +
    "\001\002\000\036\004\056\005\064\035\070\036\043\037" +
    "\044\040\061\041\060\042\050\043\072\044\073\054\053" +
    "\062\065\130\uffee\141\054\001\002\000\004\141\uffd4\001" +
    "\002\000\004\141\uffd3\001\002\000\004\130\uffed\001\002" +
    "\000\004\130\uffe3\001\002\000\036\004\uffcb\005\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\054\uffcb\062\uffcb\130\uffcb\141\uffcb\001\002\000" +
    "\004\076\100\001\002\000\004\022\101\001\002\000\004" +
    "\062\102\001\002\000\004\125\103\001\002\000\004\054" +
    "\104\001\002\000\004\137\105\001\002\000\004\024\106" +
    "\001\002\000\004\126\107\001\002\000\004\133\110\001" +
    "\002\000\036\004\uffe2\005\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\054\uffe2\062" +
    "\uffe2\130\uffe2\141\uffe2\001\002\000\020\046\122\047\116" +
    "\121\115\125\114\141\117\142\124\143\112\001\002\000" +
    "\042\077\uffbd\100\uffbd\101\uffbd\102\uffbd\106\uffbd\107\uffbd" +
    "\110\uffbd\111\uffbd\112\uffbd\113\uffbd\122\uffbd\123\uffbd\124" +
    "\uffbd\126\uffbd\133\uffbd\140\uffbd\001\002\000\012\122\uff9d" +
    "\123\uff9d\124\uff9d\126\uff9d\001\002\000\012\125\166\141" +
    "\117\142\124\143\112\001\002\000\012\125\201\141\117" +
    "\142\124\143\112\001\002\000\016\122\uffad\123\uffad\124" +
    "\uffad\126\uffad\133\uffad\140\uffad\001\002\000\036\077\uffbe" +
    "\100\uffbe\101\uffbe\102\uffbe\106\uffbe\107\uffbe\110\uffbe\111" +
    "\uffbe\112\uffbe\113\uffbe\122\uffbe\123\uffbe\124\uffbe\126\uffbe" +
    "\001\002\000\026\077\147\100\153\101\140\102\141\106" +
    "\150\107\142\110\144\111\146\112\152\113\145\001\002" +
    "\000\042\077\uffbf\100\uffbf\101\uffbf\102\uffbf\106\uffbf\107" +
    "\uffbf\110\uffbf\111\uffbf\112\uffbf\113\uffbf\122\uffbf\123\uffbf" +
    "\124\uffbf\126\uffbf\133\uffbf\140\uffbf\001\002\000\016\122" +
    "\uffae\123\uffae\124\uffae\126\uffae\133\uffae\140\uffae\001\002" +
    "\000\012\122\130\123\131\124\127\126\132\001\002\000" +
    "\044\077\uffc0\100\uffc0\101\uffc0\102\uffc0\106\uffc0\107\uffc0" +
    "\110\uffc0\111\uffc0\112\uffc0\113\uffc0\122\uffc0\123\uffc0\124" +
    "\uffc0\126\uffc0\133\uffc0\137\125\140\uffc0\001\002\000\004" +
    "\142\126\001\002\000\042\077\uffb6\100\uffb6\101\uffb6\102" +
    "\uffb6\106\uffb6\107\uffb6\110\uffb6\111\uffb6\112\uffb6\113\uffb6" +
    "\122\uffb6\123\uffb6\124\uffb6\126\uffb6\133\uffb6\140\uffb6\001" +
    "\002\000\020\046\uff90\047\uff90\121\uff90\125\uff90\141\uff90" +
    "\142\uff90\143\uff90\001\002\000\020\046\uff8e\047\uff8e\121" +
    "\uff8e\125\uff8e\141\uff8e\142\uff8e\143\uff8e\001\002\000\020" +
    "\046\uff8f\047\uff8f\121\uff8f\125\uff8f\141\uff8f\142\uff8f\143" +
    "\uff8f\001\002\000\004\127\uffa0\001\002\000\020\046\122" +
    "\047\116\121\136\125\135\141\117\142\124\143\112\001" +
    "\002\000\012\122\uff99\123\uff99\124\uff99\126\uff99\001\002" +
    "\000\012\125\166\141\117\142\124\143\112\001\002\000" +
    "\012\125\166\141\117\142\124\143\112\001\002\000\026" +
    "\077\147\100\153\101\140\102\141\106\150\107\142\110" +
    "\144\111\146\112\152\113\145\001\002\000\010\141\uffb0" +
    "\142\uffb0\143\uffb0\001\002\000\010\141\uffaf\142\uffaf\143" +
    "\uffaf\001\002\000\012\125\uff95\141\uff95\142\uff95\143\uff95" +
    "\001\002\000\012\125\166\141\117\142\124\143\112\001" +
    "\002\000\012\125\uff94\141\uff94\142\uff94\143\uff94\001\002" +
    "\000\012\125\uff91\141\uff91\142\uff91\143\uff91\001\002\000" +
    "\012\125\uff93\141\uff93\142\uff93\143\uff93\001\002\000\010" +
    "\141\uffb2\142\uffb2\143\uffb2\001\002\000\012\125\uff96\141" +
    "\uff96\142\uff96\143\uff96\001\002\000\010\141\157\142\154" +
    "\143\156\001\002\000\012\125\uff92\141\uff92\142\uff92\143" +
    "\uff92\001\002\000\010\141\uffb1\142\uffb1\143\uffb1\001\002" +
    "\000\044\077\uffbb\100\uffbb\101\uffbb\102\uffbb\106\uffbb\107" +
    "\uffbb\110\uffbb\111\uffbb\112\uffbb\113\uffbb\122\uffbb\123\uffbb" +
    "\124\uffbb\126\uffbb\133\uffbb\137\125\140\uffbb\001\002\000" +
    "\042\077\uffb7\100\uffb7\101\uffb7\102\uffb7\106\uffb7\107\uffb7" +
    "\110\uffb7\111\uffb7\112\uffb7\113\uffb7\122\uffb7\123\uffb7\124" +
    "\uffb7\126\uffb7\133\uffb7\140\uffb7\001\002\000\042\077\uffb9" +
    "\100\uffb9\101\uffb9\102\uffb9\106\uffb9\107\uffb9\110\uffb9\111" +
    "\uffb9\112\uffb9\113\uffb9\122\uffb9\123\uffb9\124\uffb9\126\uffb9" +
    "\133\uffb9\140\uffb9\001\002\000\044\077\uffba\100\uffba\101" +
    "\uffba\102\uffba\106\uffba\107\uffba\110\uffba\111\uffba\112\uffba" +
    "\113\uffba\122\uffba\123\uffba\124\uffba\126\uffba\131\161\133" +
    "\uffba\140\uffba\001\002\000\042\077\uffb8\100\uffb8\101\uffb8" +
    "\102\uffb8\106\uffb8\107\uffb8\110\uffb8\111\uffb8\112\uffb8\113" +
    "\uffb8\122\uffb8\123\uffb8\124\uffb8\126\uffb8\133\uffb8\140\uffb8" +
    "\001\002\000\006\141\163\142\162\001\002\000\004\132" +
    "\165\001\002\000\004\132\164\001\002\000\044\076\uffb4" +
    "\077\uffb4\100\uffb4\101\uffb4\102\uffb4\106\uffb4\107\uffb4\110" +
    "\uffb4\111\uffb4\112\uffb4\113\uffb4\122\uffb4\123\uffb4\124\uffb4" +
    "\126\uffb4\133\uffb4\140\uffb4\001\002\000\044\076\uffb5\077" +
    "\uffb5\100\uffb5\101\uffb5\102\uffb5\106\uffb5\107\uffb5\110\uffb5" +
    "\111\uffb5\112\uffb5\113\uffb5\122\uffb5\123\uffb5\124\uffb5\126" +
    "\uffb5\133\uffb5\140\uffb5\001\002\000\012\125\166\141\117" +
    "\142\124\143\112\001\002\000\022\077\147\100\153\101" +
    "\140\102\141\122\uff9a\123\uff9a\124\uff9a\126\uff9a\001\002" +
    "\000\014\077\147\100\153\101\140\102\141\126\171\001" +
    "\002\000\042\077\uffbc\100\uffbc\101\uffbc\102\uffbc\106\uffbc" +
    "\107\uffbc\110\uffbc\111\uffbc\112\uffbc\113\uffbc\122\uffbc\123" +
    "\uffbc\124\uffbc\126\uffbc\133\uffbc\140\uffbc\001\002\000\022" +
    "\077\147\100\153\101\140\102\141\122\uff98\123\uff98\124" +
    "\uff98\126\uff98\001\002\000\030\077\147\100\153\101\140" +
    "\102\141\106\150\107\142\110\144\111\146\112\152\113" +
    "\145\126\171\001\002\000\012\125\166\141\117\142\124" +
    "\143\112\001\002\000\014\077\147\100\153\101\140\102" +
    "\141\126\176\001\002\000\012\122\uff97\123\uff97\124\uff97" +
    "\126\uff97\001\002\000\012\125\166\141\117\142\124\143" +
    "\112\001\002\000\022\077\147\100\153\101\140\102\141" +
    "\122\uff9f\123\uff9f\124\uff9f\126\uff9f\001\002\000\012\125" +
    "\166\141\117\142\124\143\112\001\002\000\022\077\147" +
    "\100\153\101\140\102\141\122\uff9c\123\uff9c\124\uff9c\126" +
    "\uff9c\001\002\000\030\077\147\100\153\101\140\102\141" +
    "\106\150\107\142\110\144\111\146\112\152\113\145\126" +
    "\171\001\002\000\012\125\166\141\117\142\124\143\112" +
    "\001\002\000\014\077\147\100\153\101\140\102\141\126" +
    "\206\001\002\000\012\122\uff9b\123\uff9b\124\uff9b\126\uff9b" +
    "\001\002\000\030\077\147\100\153\101\140\102\141\106" +
    "\150\107\142\110\144\111\146\112\152\113\145\126\171" +
    "\001\002\000\012\125\166\141\117\142\124\143\112\001" +
    "\002\000\014\077\147\100\153\101\140\102\141\126\212" +
    "\001\002\000\012\122\uff9e\123\uff9e\124\uff9e\126\uff9e\001" +
    "\002\000\036\004\uffdd\005\uffdd\035\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\054\uffdd\062" +
    "\uffdd\130\uffdd\141\uffdd\001\002\000\004\130\ufff0\001\002" +
    "\000\004\130\uffeb\001\002\000\020\046\uffc5\047\uffc5\050" +
    "\uffc5\125\uffc5\141\uffc5\142\uffc5\143\uffc5\001\002\000\020" +
    "\046\uffc9\047\uffc9\050\uffc9\125\uffc9\141\uffc9\142\uffc9\143" +
    "\uffc9\001\002\000\020\046\uffc6\047\uffc6\050\uffc6\125\uffc6" +
    "\141\uffc6\142\uffc6\143\uffc6\001\002\000\020\046\122\047" +
    "\116\050\234\125\166\141\232\142\124\143\112\001\002" +
    "\000\020\046\uffc7\047\uffc7\050\uffc7\125\uffc7\141\uffc7\142" +
    "\uffc7\143\uffc7\001\002\000\006\133\uffcd\140\uffcd\001\002" +
    "\000\006\133\uffcc\140\uffcc\001\002\000\020\046\uffc8\047" +
    "\uffc8\050\uffc8\125\uffc8\141\uffc8\142\uffc8\143\uffc8\001\002" +
    "\000\020\046\uffca\047\uffca\050\uffca\125\uffca\141\uffca\142" +
    "\uffca\143\uffca\001\002\000\006\133\uffc3\140\uffc3\001\002" +
    "\000\006\133\uffc2\140\uffc2\001\002\000\006\133\uffce\140" +
    "\uffce\001\002\000\020\077\uffbe\100\uffbe\101\uffbe\102\uffbe" +
    "\133\uffbe\137\235\140\uffbe\001\002\000\016\077\147\100" +
    "\153\101\140\102\141\133\uffc4\140\uffc4\001\002\000\006" +
    "\133\uffc1\140\uffc1\001\002\000\016\067\243\070\242\071" +
    "\241\072\244\073\237\074\236\001\002\000\004\125\uffa6" +
    "\001\002\000\004\125\uffa7\001\002\000\004\125\245\001" +
    "\002\000\004\125\uffa9\001\002\000\004\125\uffaa\001\002" +
    "\000\004\125\uffab\001\002\000\004\125\uffa8\001\002\000" +
    "\004\126\246\001\002\000\006\133\uffac\140\uffac\001\002" +
    "\000\004\057\250\001\002\000\004\137\251\001\002\000" +
    "\006\055\252\056\254\001\002\000\004\125\uffdf\001\002" +
    "\000\004\125\255\001\002\000\004\125\uffde\001\002\000" +
    "\014\125\166\126\257\141\117\142\124\143\112\001\002" +
    "\000\014\077\147\100\153\101\140\102\141\126\261\001" +
    "\002\000\004\133\260\001\002\000\036\004\uffe1\005\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043" +
    "\uffe1\044\uffe1\054\uffe1\062\uffe1\130\uffe1\141\uffe1\001\002" +
    "\000\004\133\262\001\002\000\036\004\uffe0\005\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0" +
    "\044\uffe0\054\uffe0\062\uffe0\130\uffe0\141\uffe0\001\002\000" +
    "\004\133\uffdc\001\002\000\006\133\uffd0\140\270\001\002" +
    "\000\026\076\226\103\223\104\224\114\217\115\225\116" +
    "\222\117\220\120\216\133\uffd2\140\266\001\002\000\004" +
    "\141\265\001\002\000\004\133\uffd1\001\002\000\004\141" +
    "\265\001\002\000\004\133\uffcf\001\002\000\004\130\uffe7" +
    "\001\002\000\004\130\uffe9\001\002\000\020\046\122\047" +
    "\116\050\234\125\166\141\232\142\124\143\112\001\002" +
    "\000\004\133\276\001\002\000\036\004\uffb3\005\uffb3\035" +
    "\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3" +
    "\044\uffb3\054\uffb3\062\uffb3\130\uffb3\141\uffb3\001\002\000" +
    "\004\130\uffe5\001\002\000\036\004\056\005\064\035\070" +
    "\036\043\037\044\040\061\041\060\042\050\043\072\044" +
    "\073\054\053\062\065\130\301\141\054\001\002\000\040" +
    "\004\uffa4\005\uffa4\006\304\035\uffa4\036\uffa4\037\uffa4\040" +
    "\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\054\uffa4\062\uffa4" +
    "\130\uffa4\141\uffa4\001\002\000\004\130\303\001\002\000" +
    "\040\004\uffa3\005\uffa3\006\304\035\uffa3\036\uffa3\037\uffa3" +
    "\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\054\uffa3\062" +
    "\uffa3\130\uffa3\141\uffa3\001\002\000\006\005\064\127\306" +
    "\001\002\000\036\004\uffa1\005\uffa1\035\uffa1\036\uffa1\037" +
    "\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\054\uffa1" +
    "\062\uffa1\130\uffa1\141\uffa1\001\002\000\036\004\056\005" +
    "\064\035\070\036\043\037\044\040\061\041\060\042\050" +
    "\043\072\044\073\054\053\062\065\130\316\141\054\001" +
    "\002\000\004\127\310\001\002\000\036\004\056\005\064" +
    "\035\070\036\043\037\044\040\061\041\060\042\050\043" +
    "\072\044\073\054\053\062\065\130\311\141\054\001\002" +
    "\000\040\004\uff8b\005\uff8b\006\304\035\uff8b\036\uff8b\037" +
    "\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\054\uff8b" +
    "\062\uff8b\130\uff8b\141\uff8b\001\002\000\004\130\313\001" +
    "\002\000\040\004\uff8a\005\uff8a\006\304\035\uff8a\036\uff8a" +
    "\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\054" +
    "\uff8a\062\uff8a\130\uff8a\141\uff8a\001\002\000\036\004\uff88" +
    "\005\uff88\035\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042" +
    "\uff88\043\uff88\044\uff88\054\uff88\062\uff88\130\uff88\141\uff88" +
    "\001\002\000\036\004\uff89\005\uff89\035\uff89\036\uff89\037" +
    "\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044\uff89\054\uff89" +
    "\062\uff89\130\uff89\141\uff89\001\002\000\036\004\uff8d\005" +
    "\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d" +
    "\043\uff8d\044\uff8d\054\uff8d\062\uff8d\130\uff8d\141\uff8d\001" +
    "\002\000\004\130\320\001\002\000\036\004\uff8c\005\uff8c" +
    "\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043" +
    "\uff8c\044\uff8c\054\uff8c\062\uff8c\130\uff8c\141\uff8c\001\002" +
    "\000\036\004\uffa2\005\uffa2\035\uffa2\036\uffa2\037\uffa2\040" +
    "\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\054\uffa2\062\uffa2" +
    "\130\uffa2\141\uffa2\001\002\000\004\141\323\001\002\000" +
    "\004\126\324\001\002\000\004\127\325\001\002\000\036" +
    "\004\056\005\064\035\070\036\043\037\044\040\061\041" +
    "\060\042\050\043\072\044\073\054\053\062\065\130\326" +
    "\141\054\001\002\000\004\130\ufff1\001\002\000\004\130" +
    "\330\001\002\000\004\130\uffef\001\002\000\004\002\ufff6" +
    "\001\002\000\012\051\ufffe\052\ufffe\053\ufffe\061\005\001" +
    "\002\000\006\133\334\137\335\001\002\000\012\051\ufffa" +
    "\052\ufffa\053\ufffa\061\ufffa\001\002\000\004\141\337\001" +
    "\002\000\012\051\ufff9\052\ufff9\053\ufff9\061\ufff9\001\002" +
    "\000\006\133\334\137\340\001\002\000\006\062\341\141" +
    "\342\001\002\000\004\133\344\001\002\000\006\133\334" +
    "\137\343\001\002\000\004\141\342\001\002\000\012\051" +
    "\ufff8\052\ufff8\053\ufff8\061\ufff8\001\002\000\010\051\ufffb" +
    "\052\ufffb\053\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\014\002\013\003\007\005\010\006\011\007" +
    "\006\001\001\000\002\001\001\000\004\004\331\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\016\007" +
    "\006\001\001\000\006\003\015\005\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\011" +
    "\061\012\070\013\054\015\045\016\062\017\050\021\065" +
    "\022\046\027\044\030\041\035\066\036\051\037\040\001" +
    "\001\000\002\001\001\000\034\011\276\012\070\013\054" +
    "\015\045\016\062\017\050\021\065\022\046\027\044\030" +
    "\041\035\066\036\051\037\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\011\272\012" +
    "\070\013\054\015\045\016\062\017\050\021\065\022\046" +
    "\027\044\030\041\035\066\036\051\037\040\001\001\000" +
    "\034\011\271\012\070\013\054\015\045\016\062\017\050" +
    "\021\065\022\046\027\044\030\041\035\066\036\051\037" +
    "\040\001\001\000\002\001\001\000\006\020\262\021\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\220\001\001\000\034\011\214\012\070\013\054\015\045" +
    "\016\062\017\050\021\065\022\046\027\044\030\041\035" +
    "\066\036\051\037\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\011\074\012\070\013\054\015" +
    "\045\016\062\017\050\021\065\022\046\027\044\030\041" +
    "\035\066\036\051\037\040\001\001\000\002\001\001\000" +
    "\034\011\073\012\070\013\054\015\045\016\062\017\050" +
    "\021\065\022\046\027\044\030\041\035\066\036\051\037" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\025\117\026\120\032\112\040\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\206\026\120\001\001" +
    "\000\006\025\201\026\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\150\041\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\136\026\120\032\133\001\001\000\002" +
    "\001\001\000\006\025\172\026\120\001\001\000\006\025" +
    "\171\026\120\001\001\000\006\031\150\041\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\166\026\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\154\027\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\167\026\120\001\001" +
    "\000\004\031\150\001\001\000\004\031\150\001\001\000" +
    "\002\001\001\000\004\031\150\001\001\000\006\031\150" +
    "\041\173\001\001\000\006\025\174\026\120\001\001\000" +
    "\004\031\150\001\001\000\002\001\001\000\006\025\177" +
    "\026\120\001\001\000\004\031\150\001\001\000\006\025" +
    "\202\026\120\001\001\000\004\031\150\001\001\000\006" +
    "\031\150\041\203\001\001\000\006\025\204\026\120\001" +
    "\001\000\004\031\150\001\001\000\002\001\001\000\006" +
    "\031\150\041\207\001\001\000\006\025\210\026\120\001" +
    "\001\000\004\031\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\024\230" +
    "\025\232\026\120\032\226\033\227\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\150\001\001" +
    "\000\002\001\001\000\004\034\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\255\026\120" +
    "\001\001\000\004\031\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\220\001\001\000" +
    "\006\020\266\021\263\001\001\000\002\001\001\000\006" +
    "\020\270\021\263\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\024\274\025\232\026\120" +
    "\032\226\033\227\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\011\301\012\070\013\054" +
    "\015\045\016\062\017\050\021\065\022\046\027\044\030" +
    "\041\035\066\036\051\037\040\001\001\000\004\043\320" +
    "\001\001\000\002\001\001\000\004\043\304\001\001\000" +
    "\004\037\306\001\001\000\002\001\001\000\034\011\316" +
    "\012\070\013\054\015\045\016\062\017\050\021\065\022" +
    "\046\027\044\030\041\035\066\036\051\037\040\001\001" +
    "\000\002\001\001\000\034\011\311\012\070\013\054\015" +
    "\045\016\062\017\050\021\065\022\046\027\044\030\041" +
    "\035\066\036\051\037\040\001\001\000\004\043\314\001" +
    "\001\000\002\001\001\000\004\043\313\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\011\326\012" +
    "\070\013\054\015\045\016\062\017\050\021\065\022\046" +
    "\027\044\030\041\035\066\036\051\037\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\344\005\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\335\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\335\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\335\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // BloqueElse ::= Else ReglaIf Llave_a BloqueCodigo Llave_c BloqueElse 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueElse",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // BloqueElse ::= Else ReglaIf Llave_a Llave_c BloqueElse 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueElse",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // BloqueElse ::= Else ReglaIf Llave_a BloqueCodigo Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueElse",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // BloqueElse ::= Else ReglaIf Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueElse",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // BloqueElse ::= Else Llave_a BloqueCodigo Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueElse",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // BloqueElse ::= Else Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueElse",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OperadoresLogicos ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresLogicos",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OperadoresLogicos ::= OR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresLogicos",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OperadoresLogicos ::= AND 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresLogicos",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OperadoresRelacionales ::= Mayor_o_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresRelacionales",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OperadoresRelacionales ::= Menor_o_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresRelacionales",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OperadoresRelacionales ::= Distinto_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresRelacionales",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OperadoresRelacionales ::= Igual_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresRelacionales",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OperadoresRelacionales ::= Mayor_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresRelacionales",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OperadoresRelacionales ::= Menor_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresRelacionales",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Condiciones ::= Condiciones OperadoresLogicos Parentesis_a ExpresionAritmetica OperadoresRelacionales ExpresionAritmetica Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condiciones",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Condiciones ::= Condiciones OperadoresLogicos Negacion ExpresionAritmetica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condiciones",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Condiciones ::= Condiciones OperadoresLogicos ValorBoolean 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condiciones",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Condiciones ::= Condiciones OperadoresLogicos ExpresionAritmetica OperadoresRelacionales ExpresionAritmetica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condiciones",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Condiciones ::= Negacion Parentesis_a ExpresionAritmetica OperadoresRelacionales ExpresionAritmetica Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condiciones",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Condiciones ::= Negacion ExpresionAritmetica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condiciones",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Condiciones ::= ValorBoolean 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condiciones",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Condiciones ::= Parentesis_a ExpresionAritmetica OperadoresRelacionales ExpresionAritmetica Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condiciones",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Condiciones ::= ExpresionAritmetica OperadoresRelacionales ExpresionAritmetica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Condiciones",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ReglaIf ::= If Parentesis_a Condiciones Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReglaIf",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // BloqueIf ::= ReglaIf Llave_a BloqueCodigo Llave_c BloqueElse 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueIf",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // BloqueIf ::= ReglaIf Llave_a Llave_c BloqueElse 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueIf",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // BloqueIf ::= ReglaIf Llave_a BloqueCodigo Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueIf",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BloqueIf ::= ReglaIf Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueIf",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ControlesDeFlujo ::= BloqueIf 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ControlesDeFlujo",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TipoEntrada ::= Next 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoEntrada",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TipoEntrada ::= NextLong 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoEntrada",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TipoEntrada ::= NextByte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoEntrada",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TipoEntrada ::= NextFloat 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoEntrada",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TipoEntrada ::= NextDouble 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoEntrada",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TipoEntrada ::= NextInt 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoEntrada",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EntradaTeclado ::= Identificador Punto TipoEntrada Parentesis_a Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EntradaTeclado",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ValorBoolean ::= False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ValorBoolean",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ValorBoolean ::= True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ValorBoolean",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OperadoresAritmeticos ::= Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresAritmeticos",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OperadoresAritmeticos ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresAritmeticos",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OperadoresAritmeticos ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresAritmeticos",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OperadoresAritmeticos ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresAritmeticos",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // InicializarPosicionArreglo ::= ValorArreglo Igual Valores P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicializarPosicionArreglo",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ValorArreglo ::= Identificador Corchete_a Identificador Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ValorArreglo",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ValorArreglo ::= Identificador Corchete_a Numero Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ValorArreglo",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ValorDecimal ::= Numero Punto Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ValorDecimal",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ExpresionAritmetica ::= ExpresionAritmetica OperadoresAritmeticos ValorDecimal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ExpresionAritmetica ::= ExpresionAritmetica OperadoresAritmeticos ValorArreglo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ExpresionAritmetica ::= ExpresionAritmetica OperadoresAritmeticos TS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ExpresionAritmetica ::= ExpresionAritmetica OperadoresAritmeticos Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ExpresionAritmetica ::= ExpresionAritmetica OperadoresAritmeticos Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ExpresionAritmetica ::= Parentesis_a ExpresionAritmetica Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ExpresionAritmetica ::= TS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ExpresionAritmetica ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ExpresionAritmetica ::= ValorDecimal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExpresionAritmetica ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionAritmetica",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Valores ::= Null 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Valores",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Valores ::= EntradaTeclado 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Valores",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Valores ::= ValorBoolean 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Valores",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Valores ::= ExpresionAritmetica 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Valores",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OperadorAsignacion ::= Residuo_combinado 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OperadorAsignacion ::= Division_combinada 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OperadorAsignacion ::= Producto_combinado 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OperadorAsignacion ::= Resta_combinada 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OperadorAsignacion ::= Suma_combinada 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OperadorAsignacion ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Inicializar ::= AsignandoValor P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicializar",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // AsignandoValor ::= Identificador Decremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsignandoValor",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // AsignandoValor ::= Identificador Incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsignandoValor",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // AsignandoValor ::= Identificador OperadorAsignacion Valores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AsignandoValor",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DeclararOInicializar ::= AsignandoValor Coma DeclararOInicializar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclararOInicializar",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DeclararOInicializar ::= AsignandoValor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclararOInicializar",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DeclararOInicializar ::= Identificador Coma DeclararOInicializar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclararOInicializar",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DeclararOInicializar ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclararOInicializar",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TipoDato ::= Boolean 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDato",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TipoDato ::= Long 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDato",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TipoDato ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDato",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TipoDato ::= Double 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDato",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TipoDato ::= Short 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDato",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TipoDato ::= Byte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDato",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TipoDato ::= Char 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDato",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TipoDato ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDato",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TipoDato ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoDato",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DeclararVariable ::= TipoDato DeclararOInicializar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclararVariable",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AgregandoVariables ::= DeclararVariable P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AgregandoVariables",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TipoImpresion ::= Print 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoImpresion",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TipoImpresion ::= Println 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoImpresion",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ImprimirPantalla ::= SYstem Punto Out Punto TipoImpresion Parentesis_a ExpresionAritmetica Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ImprimirPantalla",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ImprimirPantalla ::= SYstem Punto Out Punto TipoImpresion Parentesis_a Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ImprimirPantalla",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DeclarandoEscaner ::= SCanner Identificador Igual New SCanner Parentesis_a SYstem Punto In Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclarandoEscaner",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BloqueCodigo ::= ControlesDeFlujo BloqueCodigo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BloqueCodigo ::= ControlesDeFlujo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BloqueCodigo ::= InicializarPosicionArreglo BloqueCodigo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BloqueCodigo ::= InicializarPosicionArreglo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BloqueCodigo ::= Inicializar BloqueCodigo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BloqueCodigo ::= Inicializar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BloqueCodigo ::= AgregandoVariables BloqueCodigo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BloqueCodigo ::= AgregandoVariables 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BloqueCodigo ::= ImprimirPantalla BloqueCodigo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BloqueCodigo ::= ImprimirPantalla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BloqueCodigo ::= DeclarandoEscaner BloqueCodigo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BloqueCodigo ::= DeclarandoEscaner 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BloqueCodigo",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MetodoMain ::= Public Static Void Main Parentesis_a String Corchete_a Corchete_c Identificador Parentesis_c Llave_a BloqueCodigo Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MetodoMain",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MetodoMain ::= Public Static Void Main Parentesis_a String Identificador Corchete_a Corchete_c Parentesis_c Llave_a BloqueCodigo Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MetodoMain",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MetodoMain ::= Public Static Void Main Parentesis_a String Corchete_a Corchete_c Identificador Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MetodoMain",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MetodoMain ::= Public Static Void Main Parentesis_a String Identificador Corchete_a Corchete_c Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MetodoMain",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TipoAcceso ::= Private 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoAcceso",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TipoAcceso ::= Protected 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoAcceso",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TipoAcceso ::= Public 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoAcceso",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DeclararClase ::= TipoAcceso Class Identificador Llave_a MetodoMain Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclararClase",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DeclararClase ::= TipoAcceso Class Identificador Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeclararClase",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LlamandoScanner ::= Import Identificador Punto Identificador Punto SCanner P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LlamandoScanner",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LlamarLibreria ::= Identificador Punto LlamarLibreria 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LlamarLibreria",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LlamarLibreria ::= Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LlamarLibreria",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ImportarLibrerias ::= Import LlamarLibreria ImportarLibrerias 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ImportarLibrerias",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ImportarLibrerias ::= LlamandoScanner ImportarLibrerias 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ImportarLibrerias",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ImportarLibrerias ::= LlamandoScanner 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ImportarLibrerias",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ImportarLibrerias ::= Import LlamarLibreria 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ImportarLibrerias",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Raiz ::= DeclararClase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Raiz",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Raiz ::= ImportarLibrerias DeclararClase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Raiz",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Raiz EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

